[{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"taxonomizr usage","text":"taxonomizr provides simple functions parse NCBI taxonomy files accession dumps efficiently use assign taxonomy accession numbers taxonomic IDs. useful example assign taxonomy BLAST results. done locally downloading appropriate files NCBI using included functions (see ). major functions : * prepareDatabase: download data NCBI prepare SQLite database * accessionToTaxa: convert accession numbers taxonomic IDs * getTaxonomy: convert taxonomic IDs taxonomy specialized functions : * getId: convert biological name taxonomic ID * getRawTaxonomy: find taxonomic ranks taxonomic ID * normalizeTaxa: combine raw taxonomies different taxonomic ranks * condenseTaxa: condense set taxa specific common branch * makeNewick: generate Newick formatted tree taxonomic output * getAccessions: find accessions given taxonomic ID * getDescendants: find descendants given taxonomic ID simple use case might look like (see details):","code":"library(taxonomizr) #note this will require a lot of hard drive space, bandwidth and time to process all the data from NCBI prepareDatabase('accessionTaxa.sql') blastAccessions<-c(\"Z17430.1\",\"Z17429.1\",\"X62402.1\")  ids<-accessionToTaxa(blastAccessions,'accessionTaxa.sql') getTaxonomy(ids,'accessionTaxa.sql')"},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"requirements","dir":"Articles","previous_headings":"","what":"Requirements","title":"taxonomizr usage","text":"package downloads databases NCBI stores easily accessible form hard drive. ends taking decent amount space ’ll probably want around 75 Gb free hard drive space.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"taxonomizr usage","text":"package CRAN, install simple: want development version directly github, use devtools library run: use library, load R:","code":"install.packages(\"taxonomizr\") devtools::install_github(\"sherrillmix/taxonomizr\") library(taxonomizr)"},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"preparation","dir":"Articles","previous_headings":"","what":"Preparation","title":"taxonomizr usage","text":"Since version 0.5.0, simple function run preparations. Note ’ll need bit time, download bandwidth hard drive space running command (’re downloading taxonomic assignments every record NCBI). create SQLite database called accessionTaxa.sql current working directory (may want store somewhere centrally located need duplicated every project), can run: everything works prepared SQLite database ready use. can skip “Manual preparation” steps . files cached locally preparation required (delete/rename SQLite database recall function regenerate database). necessary manually check presence database since function checks see SQLite database present skips downloading/processing. example, running command produces: Note want taxonomic data want assign taxonomy accession ID can just get much smaller names nodes data sets exclude large download time consuming databasing accession IDs setting getAccessions=FALSE e.g.: area assigning taxonomy protein data, want grab prot.accession2taxid.gz NCBI specifying types='prot' argument (types=c(\"nucl_gb\", \"nucl_wgs\",\"prot\") proteins nucleotides):","code":"prepareDatabase('accessionTaxa.sql') ## Downloading names and nodes with getNamesAndNodes() ## Downloading accession2taxid with getAccession2taxid() ## This can be a big (several gigabytes) download. Please be patient and use a fast connection. ## Preprocessing names with read.names.sql() ## Preprocessing nodes with read.nodes.sql() ## Preprocessing accession2taxid with read.accession2taxid() ## Reading ./nucl_gb.accession2taxid.gz. ## Reading ./nucl_wgs.accession2taxid.gz. ## Reading in values. This may take a while. ## Adding index. This may also take a while. ## [1] \"accessionTaxa.sql\" prepareDatabase('accessionTaxa.sql') ## SQLite database accessionTaxa.sql already exists. Delete to regenerate ## [1] \"accessionTaxa.sql\" prepareDatabase(getAccessions=FALSE) ## Downloading names and nodes with getNamesAndNodes() ##  [100%] Downloaded 57373562 bytes... ##  [100%] Downloaded 49 bytes... ## Preprocessing names with read.names.sql() ## Preprocessing nodes with read.nodes.sql() ## [1] \"nameNode.sqlite\" prepareDatabase(types='prot') ## Downloading names and nodes with getNamesAndNodes() ## Preprocessing names with read.names.sql() ## Preprocessing nodes with read.nodes.sql() ## Downloading accession2taxid with getAccession2taxid() ## This can be a big (several gigabytes) download. Please be patient and use a fast connection. ## Preprocessing accession2taxid with read.accession2taxid() ## Reading ./prot.accession2taxid.gz. ## Reading in values. This may take a while. ## Adding index. This may also take a while. ## [1] \"nameNode.sqlite\""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"producing-accession-numbers","dir":"Articles","previous_headings":"Assigning taxonomy","what":"Producing accession numbers","title":"taxonomizr usage","text":"NCBI accession numbers often obtained BLAST search (usually second column output blastn, blastx, blastp, …). example output might look like: identify taxon given sequence blast e.g. NCBI nt database load results R. NCBI databases, accession number often 4th item | (pipe) separated reference field (often second column tab separated result). example, CP002582.1 gi|326539903|gb|CP002582.1| . just example, reading blast results might look something like:","code":"read1   gi|326539903|gb|CP002582.1|     69.68   1745    448     69      3       1702    3517898 3519606 3e-169  608 read2   gi|160426828|gb|CP000885.1|     68.46   1763    452     82      3       1711    1790367 1788655 4e-140  511 ... blastResults<-read.table('XXXX.blast',header=FALSE,stringsAsFactors=FALSE) #grab the 4th |-separated field from the reference name in the second column accessions<-sapply(strsplit(blastResults[,2],'\\\\|'),'[',4)"},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"finding-taxonomy-for-ncbi-accession-numbers","dir":"Articles","previous_headings":"Assigning taxonomy","what":"Finding taxonomy for NCBI accession numbers","title":"taxonomizr usage","text":"Now ready convert NCBI accession numbers taxonomic IDs. example, find taxonomic IDs associated NCBI accession numbers “LN847353.1” “AL079352.3”: get taxonomy IDs: can also get taxonomy NCBI accession numbers without versions (.X following main number e.g. “.1” LN847353.1) using version='base' argument accessionToTaxa:","code":"taxaId<-accessionToTaxa(c(\"LN847353.1\",\"AL079352.3\"),\"accessionTaxa.sql\") print(taxaId) ## [1] 1313 9606 getTaxonomy(taxaId,'accessionTaxa.sql') ##      superkingdom phylum       class      order             ## 1313 \"Bacteria\"   \"Firmicutes\" \"Bacilli\"  \"Lactobacillales\" ## 9606 \"Eukaryota\"  \"Chordata\"   \"Mammalia\" \"Primates\"        ##      family             genus           species                    ## 1313 \"Streptococcaceae\" \"Streptococcus\" \"Streptococcus pneumoniae\" ## 9606 \"Hominidae\"        \"Homo\"          \"Homo sapiens\" taxaId<-accessionToTaxa(c(\"LN847353\",\"AL079352\"),\"accessionTaxa.sql\") print(taxaId) ## [1] NA NA taxaId<-accessionToTaxa(c(\"LN847353\",\"AL079352\"),\"accessionTaxa.sql\",version='base') print(taxaId) ## [1] 1313 9606"},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"finding-taxonomy-for-taxonomic-names","dir":"Articles","previous_headings":"Assigning taxonomy","what":"Finding taxonomy for taxonomic names","title":"taxonomizr usage","text":"’d like find IDs taxonomic names can something like: get taxonomy IDs use getTaxonomy:","code":"taxaId<-getId(c('Homo sapiens','Bos taurus','Homo','Alces alces'),'accessionTaxa.sql') print(taxaId) ## [1] \"9606\" \"9913\" \"9605\" \"9852\" taxa<-getTaxonomy(taxaId,'accessionTaxa.sql') print(taxa) ##      superkingdom phylum     class      order      family      genus   ## 9606 \"Eukaryota\"  \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Homo\"  ## 9913 \"Eukaryota\"  \"Chordata\" \"Mammalia\" NA         \"Bovidae\"   \"Bos\"   ## 9605 \"Eukaryota\"  \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Homo\"  ## 9852 \"Eukaryota\"  \"Chordata\" \"Mammalia\" NA         \"Cervidae\"  \"Alces\" ##      species        ## 9606 \"Homo sapiens\" ## 9913 \"Bos taurus\"   ## 9605 NA             ## 9852 \"Alces alces\""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"finding-descendants-for-a-given-taxa","dir":"Articles","previous_headings":"Assigning taxonomy","what":"Finding descendants for a given taxa","title":"taxonomizr usage","text":"function getDescents can used find descendants taxonomic level given taxa. example find species (default) Homininae subfamily (taxonomic ID 207598): genuses: Note index nodes table added v0.10.1 make run faster. database created prior v0.10.1 need maximum speed finding descendants please regenerate database.","code":"getDescendants(207598,'accessionTaxa.sql') ## [1] \"Gorilla gorilla\"                   \"Gorilla beringei\"                  ## [3] \"Pan paniscus\"                      \"Pan troglodytes\"                   ## [5] \"Homo sapiens\"                      \"Homo heidelbergensis\"              ## [7] \"Homo sapiens environmental sample\" \"Homo sp.\" getDescendants(207598,'accessionTaxa.sql','genus') ## [1] \"Gorilla\" \"Pan\"     \"Homo\""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"finding-common-names-for-taxonomic-ids","dir":"Articles","previous_headings":"Assigning taxonomy","what":"Finding common names for taxonomic IDs","title":"taxonomizr usage","text":"’d like find common types names given taxa ID can use getCommon: specify certain type(s) name (“common” names seem often split “common name” “genbank common name”): Note databases created taxonomizr versions earlier v0.9.4 contain type field database reloaded use function. example, done calling:","code":"getCommon(c(9913,9606),'accessionTaxa.sql') ## [[1]] ##                         name                type ## 1                  Bos bovis             synonym ## 2     Bos primigenius taurus             synonym ## 3  Bos taurus Linnaeus, 1758           authority ## 4                 Bos taurus     scientific name ## 5      Bovidae sp. Adi Nefas            includes ## 6                     bovine         common name ## 7                     cattle genbank common name ## 8                        cow         common name ## 9                  dairy cow         common name ## 10           domestic cattle         common name ## 11              domestic cow         common name ## 12                        ox         common name ## 13                      oxen         common name ##  ## [[2]] ##                          name                type ## 1 Homo sapiens Linnaeus, 1758           authority ## 2                Homo sapiens     scientific name ## 3                       human genbank common name getCommon(c(9913,9606,9894),'accessionTaxa.sql',c('genbank common name','common name')) ## [[1]] ##              name                type ## 1          bovine         common name ## 2          cattle genbank common name ## 3             cow         common name ## 4       dairy cow         common name ## 5 domestic cattle         common name ## 6    domestic cow         common name ## 7              ox         common name ## 8            oxen         common name ##  ## [[2]] ##    name                type ## 1 human genbank common name ##  ## [[3]] ##      name                type ## 1 giraffe genbank common name taxonomizr::getNamesAndNodes() taxonomizr::read.names.sql('names.dmp','nameNode.sqlite',overwrite=TRUE)"},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"condensing-taxonomy-a-k-a--lowest-common-ancestor-lca","dir":"Articles","previous_headings":"Assigning taxonomy","what":"Condensing taxonomy a.k.a. lowest common ancestor LCA","title":"taxonomizr usage","text":"can use condenseTaxa function find agreements among taxonomic hits. example condense taxonomy previous section lowest taxonomic rank shared three taxa: function can also fed large number grouped hits, e.g. BLAST hits high throughput sequencing reads filtering best hits read, output condensed taxonomy grouping:","code":"condenseTaxa(taxa) ##   superkingdom phylum     class      order family genus species ## 1 \"Eukaryota\"  \"Chordata\" \"Mammalia\" NA    NA     NA    NA groupings<-c('read1','read2','read1','read2') condenseTaxa(taxa,groupings) ##       superkingdom phylum     class      order      family      genus  ## read1 \"Eukaryota\"  \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Homo\" ## read2 \"Eukaryota\"  \"Chordata\" \"Mammalia\" NA         NA          NA     ##       species ## read1 NA      ## read2 NA"},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"find-all-taxonomic-assignments-for-a-given-taxa","dir":"Articles","previous_headings":"Assigning taxonomy","what":"Find all taxonomic assignments for a given taxa","title":"taxonomizr usage","text":"get taxonomic assignments given taxa regardless particular rank, can use getRawTaxonomy function. Note often many intermediate ranks outside common taxonomic ranks. function returns list since different IDs can differing numbers ranks. used similarly getTaxonomy: raw taxonomy varying numbers levels can normalized taxa share number levels (aligning taxonomic levels unspecific “clade”) using normalizeTaxa function: normalizeTaxa best figure order taxonomic levels automatically can sometimes left ambiguous cases. result error like: ’s saying algorithm unclear data whether suborder infraorder specific taxonomic level. clarify, give lineageOrder parameter vector going least specific like: especially troublesome sets, may repeat step several times getting new error time find ambiguities. result building vector specifying ordering several ambiguous levels like:","code":"getRawTaxonomy(c(9606,9913),'accessionTaxa.sql') ## $`9606` ##                species                  genus              subfamily  ##         \"Homo sapiens\"                 \"Homo\"            \"Homininae\"  ##                 family            superfamily              parvorder  ##            \"Hominidae\"           \"Hominoidea\"           \"Catarrhini\"  ##             infraorder               suborder                  order  ##          \"Simiiformes\"          \"Haplorrhini\"             \"Primates\"  ##             superorder                  clade                clade.1  ##     \"Euarchontoglires\"        \"Boreoeutheria\"             \"Eutheria\"  ##                clade.2                  class                clade.3  ##               \"Theria\"             \"Mammalia\"              \"Amniota\"  ##                clade.4                class.1             superclass  ##            \"Tetrapoda\" \"Dipnotetrapodomorpha\"        \"Sarcopterygii\"  ##                clade.5                clade.6                clade.7  ##         \"Euteleostomi\"           \"Teleostomi\"        \"Gnathostomata\"  ##                clade.8              subphylum                 phylum  ##           \"Vertebrata\"             \"Craniata\"             \"Chordata\"  ##                clade.9               clade.10               clade.11  ##        \"Deuterostomia\"            \"Bilateria\"            \"Eumetazoa\"  ##                kingdom               clade.12           superkingdom  ##              \"Metazoa\"         \"Opisthokonta\"            \"Eukaryota\"  ##                no rank  ##   \"cellular organisms\"  ##  ## $`9913` ##                species                  genus              subfamily  ##           \"Bos taurus\"                  \"Bos\"              \"Bovinae\"  ##                 family             infraorder               suborder  ##              \"Bovidae\"               \"Pecora\"           \"Ruminantia\"  ##                  order             superorder                  clade  ##         \"Artiodactyla\"       \"Laurasiatheria\"        \"Boreoeutheria\"  ##                clade.1                clade.2                  class  ##             \"Eutheria\"               \"Theria\"             \"Mammalia\"  ##                clade.3                clade.4                class.1  ##              \"Amniota\"            \"Tetrapoda\" \"Dipnotetrapodomorpha\"  ##             superclass                clade.5                clade.6  ##        \"Sarcopterygii\"         \"Euteleostomi\"           \"Teleostomi\"  ##                clade.7                clade.8              subphylum  ##        \"Gnathostomata\"           \"Vertebrata\"             \"Craniata\"  ##                 phylum                clade.9               clade.10  ##             \"Chordata\"        \"Deuterostomia\"            \"Bilateria\"  ##               clade.11                kingdom               clade.12  ##            \"Eumetazoa\"              \"Metazoa\"         \"Opisthokonta\"  ##           superkingdom                no rank  ##            \"Eukaryota\"   \"cellular organisms\" raw<-getRawTaxonomy(c(9606,9913),'accessionTaxa.sql') normalizeTaxa(raw) ##      no rank              superkingdom superkingdom.1 kingdom   kingdom.1   ## 9606 \"cellular organisms\" \"Eukaryota\"  \"Opisthokonta\" \"Metazoa\" \"Eumetazoa\" ## 9913 \"cellular organisms\" \"Eukaryota\"  \"Opisthokonta\" \"Metazoa\" \"Eumetazoa\" ##      kingdom.2   kingdom.3       phylum     subphylum  subphylum.1  ## 9606 \"Bilateria\" \"Deuterostomia\" \"Chordata\" \"Craniata\" \"Vertebrata\" ## 9913 \"Bilateria\" \"Deuterostomia\" \"Chordata\" \"Craniata\" \"Vertebrata\" ##      subphylum.2     subphylum.3  subphylum.4    superclass      ## 9606 \"Gnathostomata\" \"Teleostomi\" \"Euteleostomi\" \"Sarcopterygii\" ## 9913 \"Gnathostomata\" \"Teleostomi\" \"Euteleostomi\" \"Sarcopterygii\" ##      superclass.1           superclass.2 superclass.3 class      class.1  ## 9606 \"Dipnotetrapodomorpha\" \"Tetrapoda\"  \"Amniota\"    \"Mammalia\" \"Theria\" ## 9913 \"Dipnotetrapodomorpha\" \"Tetrapoda\"  \"Amniota\"    \"Mammalia\" \"Theria\" ##      class.2    class.3         superorder         order          suborder      ## 9606 \"Eutheria\" \"Boreoeutheria\" \"Euarchontoglires\" \"Primates\"     \"Haplorrhini\" ## 9913 \"Eutheria\" \"Boreoeutheria\" \"Laurasiatheria\"   \"Artiodactyla\" \"Ruminantia\"  ##      infraorder    parvorder    superfamily  family      subfamily   genus  ## 9606 \"Simiiformes\" \"Catarrhini\" \"Hominoidea\" \"Hominidae\" \"Homininae\" \"Homo\" ## 9913 \"Pecora\"      NA           NA           \"Bovidae\"   \"Bovinae\"   \"Bos\"  ##      species        ## 9606 \"Homo sapiens\" ## 9913 \"Bos taurus\" Error in topoSort(c(nonClade, list(lineageOrder)), errorIfAmbiguous = TRUE) :    Ambiguous ordering found in topoSort (suborder vs infraorder) normalizeTaxa(raw,lineageOrder=c('infraorder','suborder')) normalizeTaxa(raw,lineageOrder=c('infraorder','suborder','superorder','infraclass','subclass','class'))"},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"finding-accessions-for-a-given-taxonomic-id","dir":"Articles","previous_headings":"Assigning taxonomy","what":"Finding accessions for a given taxonomic ID","title":"taxonomizr usage","text":"find accessions given taxonomic ID, can use getAccessions function. bit unusual use case preserve space, index created default read.accession2taxid. going use function, want rebuild SQLite database indexTaxa argument set true something like: can get accessions taxa 3702 command like (note limit argument used order preserve space):","code":"read.accession2taxid(list.files('.','accession2taxid.gz$'),'accessionTaxa.sql',indexTaxa=TRUE,overwrite=TRUE) ## Reading nucl_gb.accession2taxid.gz. ## Reading nucl_wgs.accession2taxid.gz. ## Reading in values. This may take a while. ## Adding index. This may also take a while. getAccessions(3702,'accessionTaxa.sql',limit=10) ##    taxa accession ## 1  3702  X58148.1 ## 2  3702  X66414.1 ## 3  3702  X60045.1 ## 4  3702  X07376.1 ## 5  3702  X54927.1 ## 6  3702  X54926.1 ## 7  3702  X54928.1 ## 8  3702  X54930.1 ## 9  3702  X54929.1 ## 10 3702  X52320.1"},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"convert-taxonomy-to-newick-tree","dir":"Articles","previous_headings":"Assigning taxonomy","what":"Convert taxonomy to Newick tree","title":"taxonomizr usage","text":"probably useful specific cases convenience function makeNewick convert taxonomy Newick tree included. function takes matrix columns corresponding taxonomic categories rows corresponding taxonomic assignments, e.g. output condenseTaxa getTaxonomy normalizeTaxa reduces Newick formatted tree. example: quotes needed, specify quote argument: default, makeNewick includes trailing nodes NA tree e.g.: nodes desired set excludeTerminalNAs FALSE: Note taxa may specific taxon given taxa taxonomy matrix leaf resulting tree appears taxonomy e.g. Chordata example.","code":"taxa ##      [,1]        [,2]       [,3]       [,4]       [,5]        [,6]    ## [1,] \"Eukaryota\" \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Homo\"  ## [2,] \"Eukaryota\" \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Pan\"   ## [3,] \"Eukaryota\" \"Chordata\" \"Mammalia\" NA         \"Cervidae\"  \"Alces\" makeNewick(taxa) ## [1] \"((((((Homo,Pan)Hominidae)Primates,((Alces)Cervidae)_)Mammalia)Chordata)Eukaryota);\" makeNewick(taxa,quote=\"'\") ## [1] \"(((((('Homo','Pan')'Hominidae')'Primates',(('Alces')'Cervidae')_)'Mammalia')'Chordata')'Eukaryota');\" taxa[3,3:6]<-NA print(taxa) ##      [,1]        [,2]       [,3]       [,4]       [,5]        [,6]   ## [1,] \"Eukaryota\" \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Homo\" ## [2,] \"Eukaryota\" \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Pan\"  ## [3,] \"Eukaryota\" \"Chordata\" NA         NA         NA          NA makeNewick(taxa) ## [1] \"((((((Homo,Pan)Hominidae)Primates)Mammalia,(((_)_)_)_)Chordata)Eukaryota);\" makeNewick(taxa,excludeTerminalNAs=TRUE) ## [1] \"((((((Homo,Pan)Hominidae)Primates)Mammalia)Chordata)Eukaryota);\""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"note-ncbi-name-changes-in-early-2023","dir":"Articles","previous_headings":"","what":"Note: NCBI name changes in early 2023","title":"taxonomizr usage","text":"Please note NCBI change naming several major prokaryote phylums e.g. Firmicutes became Bacillota early 2023. Please watch problems arise. example: * names assigned taxonomy may shift updating database post-change version * comparisons old analyses performed pre-change new analyses performed post-change need done care understand things correctly, actual taxonomy ID change might wise retain taxonomy ID analyses. final analysis, taxonomic names can assigned based whatever naming scheme use time.","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-11-1","dir":"Articles","previous_headings":"Changelog","what":"v0.11.1","title":"taxonomizr usage","text":"Change superkingdom domain default taxonomic levels match NCBI changes","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-10-8","dir":"Articles","previous_headings":"Changelog","what":"v0.10.8","title":"taxonomizr usage","text":"Add getNames option getTaxonomy return taxon IDs rather taxon names Deal with_mock deprecation test code pkgdown changes","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-10-7","dir":"Articles","previous_headings":"Changelog","what":"v0.10.7","title":"taxonomizr usage","text":"Store nodes table’s parent column INT instead REAL","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-10-6","dir":"Articles","previous_headings":"Changelog","what":"v0.10.6","title":"taxonomizr usage","text":"Fix test error message variable across platforms","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-10-5","dir":"Articles","previous_headings":"Changelog","what":"v0.10.5","title":"taxonomizr usage","text":"Catch 404 errors report errors Add resume argument download functions Don’t retain temp files downloads less 10kb README touchups","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-10-4","dir":"Articles","previous_headings":"Changelog","what":"v0.10.4","title":"taxonomizr usage","text":"Minor improvement output md5 modification date downloads aid debugging network issues","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-10-3","dir":"Articles","previous_headings":"Changelog","what":"v0.10.3","title":"taxonomizr usage","text":"Minor fix prevent accessionToTaxa hanging given numeric inputs","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-10-2","dir":"Articles","previous_headings":"Changelog","what":"v0.10.2","title":"taxonomizr usage","text":"Behind scenes switch multi_download function curl package allow download resumption interrupted downloads. adds dependency curl package >=5.0.0. Add protocol option choose FTP HTTP protocols downloading. two protocols perform similarly relative speeds NCBI’s ftp http servers seem vary probably whole lot reason choose one unless firewall blocking FTP ports.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-10-1","dir":"Articles","previous_headings":"Changelog","what":"v0.10.1","title":"taxonomizr usage","text":"Add getDescendants function get descendants given taxon","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-9-4","dir":"Articles","previous_headings":"Changelog","what":"v0.9.4","title":"taxonomizr usage","text":"Add getCommon function get names database given taxa ID","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-9-3","dir":"Articles","previous_headings":"Changelog","what":"v0.9.3","title":"taxonomizr usage","text":"Fix bug testing script","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-9-2","dir":"Articles","previous_headings":"Changelog","what":"v0.9.2","title":"taxonomizr usage","text":"Allow factors input accessionToTaxa Document sqlite pragmas read.accession2taxid Inherit … argument documentation prepareDatabase Catch input/output error processing large files Update various user-facing links ftp https easier access","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-8-4","dir":"Articles","previous_headings":"Changelog","what":"v0.8.4","title":"taxonomizr usage","text":"Add quote option makeNewick Trim trailing NAs tree makeNewick excludeTerminalNAs TRUE Add terminal semicolon end makeNewick tree unless terminator NULL","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-8-3","dir":"Articles","previous_headings":"Changelog","what":"v0.8.3","title":"taxonomizr usage","text":"Add “rank” normalizeTaxa’s default exclusion Expand README","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-8-2","dir":"Articles","previous_headings":"Changelog","what":"v0.8.2","title":"taxonomizr usage","text":"Add normalizeTaxa function","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-8-1","dir":"Articles","previous_headings":"Changelog","what":"v0.8.1","title":"taxonomizr usage","text":"Fix minor typos","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-8-0","dir":"Articles","previous_headings":"Changelog","what":"v0.8.0","title":"taxonomizr usage","text":"Switch curl::curl_download avoid Windows issues","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-7-1","dir":"Articles","previous_headings":"Changelog","what":"v0.7.1","title":"taxonomizr usage","text":"Add md5 check downloads","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-7-0","dir":"Articles","previous_headings":"Changelog","what":"v0.7.0","title":"taxonomizr usage","text":"Add getRawTaxonomy function Add option download accessions","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-6-0","dir":"Articles","previous_headings":"Changelog","what":"v0.6.0","title":"taxonomizr usage","text":"Fix named vector bug accessionToTaxa Add makeNewick function Deal default 60 second timeout downloads R","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-5-3","dir":"Articles","previous_headings":"Changelog","what":"v0.5.3","title":"taxonomizr usage","text":"Remove nucl_est nucl_gss defaults since NCBI folded nucl_gb removed Squash R:devel bug","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"v0-5-0","dir":"Articles","previous_headings":"Changelog","what":"v0.5.0","title":"taxonomizr usage","text":"Transitioned data.table SQLite Addeded convenience prepareDatabase() function Squashed Windows testing errors","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"manual-preparation-of-database-usually-not-necessary","dir":"Articles","previous_headings":"","what":"Manual preparation of database (usually not necessary)","title":"taxonomizr usage","text":"Note: Since version 0.5.0, usually necessary run following manually, function prepareDatabase() automatically (see ). order avoid constant internet access slow APIs, first step using package downloads necessary files NCBI. uses bit disk space makes future access reliable fast. Note: necessary manually check presence files since functions automatically check see output present skip downloading/processing. Delete local files like redownload reprocess .","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"download-names-and-nodes","dir":"Articles","previous_headings":"Manual preparation of database (usually not necessary)","what":"Download names and nodes","title":"taxonomizr usage","text":"First, download necessary names nodes files NCBI:","code":"getNamesAndNodes() ## [1] \"./names.dmp\" \"./nodes.dmp\""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"download-accession-to-taxa-files","dir":"Articles","previous_headings":"Manual preparation of database (usually not necessary)","what":"Download accession to taxa files","title":"taxonomizr usage","text":"download accession taxa id conversion files NCBI. Note: pretty big download (several gigabytes): also like identify protein accession numbers, also download prot file NCBI (big download):","code":"#this is a big download getAccession2taxid() ## This can be a big (several gigabytes) download. Please be patient and use a fast connection. ## [1] \"./nucl_gb.accession2taxid.gz\"  \"./nucl_wgs.accession2taxid.gz\" #this is a big download getAccession2taxid(types='prot') ## This can be a big (several gigabytes) download. Please be patient and use a fast connection. ## [1] \"./prot.accession2taxid.gz\""},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"convert-names-nodes-and-accessions-to-database","dir":"Articles","previous_headings":"Manual preparation of database (usually not necessary)","what":"Convert names, nodes and accessions to database","title":"taxonomizr usage","text":"process downloaded names nodes files easily accessed form: Next process downloaded accession files database (one take ): Now everything ready processing. files cached locally preparation required (whenever like update data). necessary manually check presence files since functions automatically check see output present skip downloading/processing. Delete local files like redownload reprocess .","code":"read.names.sql('names.dmp','accessionTaxa.sql') read.nodes.sql('nodes.dmp','accessionTaxa.sql') read.accession2taxid(list.files('.','accession2taxid.gz$'),'accessionTaxa.sql') ## Reading nucl_gb.accession2taxid.gz. ## Reading nucl_wgs.accession2taxid.gz. ## Reading prot.accession2taxid.gz. ## Reading in values. This may take a while. ## Adding index. This may also take a while."},{"path":"https://github.com/sherrillmix/taxonomizr/articles/usage.html","id":"switch-from-data-table-to-sqlite","dir":"Articles","previous_headings":"","what":"Switch from data.table to SQLite","title":"taxonomizr usage","text":"Version 0.5.0 marked change name node lookups using data.table using SQLite. necessary increase performance (10-100x speedup getTaxonomy) create simpler interface (single SQLite database contains necessary data). Unfortunately, switch requires couple breaking changes: * getTaxonomy changes getTaxonomy(ids,namesDT,nodesDT) getTaxonomy(ids,sqlFile) * getId changes getId(taxa,namesDT) getId(taxa,sqlFile) * read.names deprecated, instead use read.names.sql. example, instead calling names<-read.names('names.dmp') every session, simply call read.names.sql('names.dmp','accessionTaxa.sql') (use convenient prepareDatabase )). * read.nodes deprecated, instead use read.names.sql. example. instead calling nodes<-read.names('nodes.dmp') every session, simply call read.nodes.sql('nodes.dmp','accessionTaxa.sql') (use convenient prepareDatabase ). ’ve tried ease problems overloading getTaxonomy getId still function (warning) passed data.table names nodes argument providing simpler prepareDatabase function completing setup steps (hopefully avoiding direct calls read.names read.nodes users). plan eventually remove data.table functionality avoid split codebase please switch new SQLite format new code.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Sherrill-Mix. Author, maintainer.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sherrill-Mix S (2025). taxonomizr: Functions Work NCBI Accessions Taxonomy. R package version 0.11.1, https://github.com/sherrillmix/taxonomizr/.","code":"@Manual{,   title = {taxonomizr: Functions to Work with NCBI Accessions and Taxonomy},   author = {Scott Sherrill-Mix},   year = {2025},   note = {R package version 0.11.1},   url = {https://github.com/sherrillmix/taxonomizr/}, }"},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"taxonomizr provides simple functions parse NCBI taxonomy files accession dumps efficiently use assign taxonomy accession numbers taxonomic IDs. useful example assign taxonomy BLAST results. done locally downloading appropriate files NCBI using included functions (see ). major functions : * prepareDatabase: download data NCBI prepare SQLite database * accessionToTaxa: convert accession numbers taxonomic IDs * getTaxonomy: convert taxonomic IDs taxonomy specialized functions : * getId: convert biological name taxonomic ID * getRawTaxonomy: find taxonomic ranks taxonomic ID * normalizeTaxa: combine raw taxonomies different taxonomic ranks * condenseTaxa: condense set taxa specific common branch * makeNewick: generate Newick formatted tree taxonomic output * getAccessions: find accessions given taxonomic ID * getDescendants: find descendants given taxonomic ID simple use case might look like (see details):","code":"library(taxonomizr) #note this will require a lot of hard drive space, bandwidth and time to process all the data from NCBI prepareDatabase('accessionTaxa.sql') blastAccessions<-c(\"Z17430.1\",\"Z17429.1\",\"X62402.1\")  ids<-accessionToTaxa(blastAccessions,'accessionTaxa.sql') getTaxonomy(ids,'accessionTaxa.sql')"},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"package downloads databases NCBI stores easily accessible form hard drive. ends taking decent amount space ’ll probably want around 75 Gb free hard drive space.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"package CRAN, install simple: want development version directly github, use devtools library run: use library, load R:","code":"install.packages(\"taxonomizr\") devtools::install_github(\"sherrillmix/taxonomizr\") library(taxonomizr)"},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"preparation","dir":"","previous_headings":"","what":"Preparation","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Since version 0.5.0, simple function run preparations. Note ’ll need bit time, download bandwidth hard drive space running command (’re downloading taxonomic assignments every record NCBI). create SQLite database called accessionTaxa.sql current working directory (may want store somewhere centrally located need duplicated every project), can run: everything works prepared SQLite database ready use. can skip “Manual preparation” steps . files cached locally preparation required (delete/rename SQLite database recall function regenerate database). necessary manually check presence database since function checks see SQLite database present skips downloading/processing. example, running command produces: Note want taxonomic data want assign taxonomy accession ID can just get much smaller names nodes data sets exclude large download time consuming databasing accession IDs setting getAccessions=FALSE e.g.: area assigning taxonomy protein data, want grab prot.accession2taxid.gz NCBI specifying types='prot' argument (types=c(\"nucl_gb\", \"nucl_wgs\",\"prot\") proteins nucleotides):","code":"prepareDatabase('accessionTaxa.sql') ## Downloading names and nodes with getNamesAndNodes() ## Downloading accession2taxid with getAccession2taxid() ## This can be a big (several gigabytes) download. Please be patient and use a fast connection. ## Preprocessing names with read.names.sql() ## Preprocessing nodes with read.nodes.sql() ## Preprocessing accession2taxid with read.accession2taxid() ## Reading ./nucl_gb.accession2taxid.gz. ## Reading ./nucl_wgs.accession2taxid.gz. ## Reading in values. This may take a while. ## Adding index. This may also take a while. ## [1] \"accessionTaxa.sql\" prepareDatabase('accessionTaxa.sql') ## SQLite database accessionTaxa.sql already exists. Delete to regenerate ## [1] \"accessionTaxa.sql\" prepareDatabase(getAccessions=FALSE) ## Downloading names and nodes with getNamesAndNodes() ##  [100%] Downloaded 57373562 bytes... ##  [100%] Downloaded 49 bytes... ## Preprocessing names with read.names.sql() ## Preprocessing nodes with read.nodes.sql() ## [1] \"nameNode.sqlite\" prepareDatabase(types='prot') ## Downloading names and nodes with getNamesAndNodes() ## Preprocessing names with read.names.sql() ## Preprocessing nodes with read.nodes.sql() ## Downloading accession2taxid with getAccession2taxid() ## This can be a big (several gigabytes) download. Please be patient and use a fast connection. ## Preprocessing accession2taxid with read.accession2taxid() ## Reading ./prot.accession2taxid.gz. ## Reading in values. This may take a while. ## Adding index. This may also take a while. ## [1] \"nameNode.sqlite\""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"producing-accession-numbers","dir":"","previous_headings":"Assigning taxonomy","what":"Producing accession numbers","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"NCBI accession numbers often obtained BLAST search (usually second column output blastn, blastx, blastp, …). example output might look like: identify taxon given sequence blast e.g. NCBI nt database load results R. NCBI databases, accession number often 4th item | (pipe) separated reference field (often second column tab separated result). example, CP002582.1 gi|326539903|gb|CP002582.1| . just example, reading blast results might look something like:","code":"read1   gi|326539903|gb|CP002582.1|     69.68   1745    448     69      3       1702    3517898 3519606 3e-169  608 read2   gi|160426828|gb|CP000885.1|     68.46   1763    452     82      3       1711    1790367 1788655 4e-140  511 ... blastResults<-read.table('XXXX.blast',header=FALSE,stringsAsFactors=FALSE) #grab the 4th |-separated field from the reference name in the second column accessions<-sapply(strsplit(blastResults[,2],'\\\\|'),'[',4)"},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"finding-taxonomy-for-ncbi-accession-numbers","dir":"","previous_headings":"Assigning taxonomy","what":"Finding taxonomy for NCBI accession numbers","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Now ready convert NCBI accession numbers taxonomic IDs. example, find taxonomic IDs associated NCBI accession numbers “LN847353.1” “AL079352.3”: get taxonomy IDs: can also get taxonomy NCBI accession numbers without versions (.X following main number e.g. “.1” LN847353.1) using version='base' argument accessionToTaxa:","code":"taxaId<-accessionToTaxa(c(\"LN847353.1\",\"AL079352.3\"),\"accessionTaxa.sql\") print(taxaId) ## [1] 1313 9606 getTaxonomy(taxaId,'accessionTaxa.sql') ##      superkingdom phylum       class      order ## 1313 \"Bacteria\"   \"Firmicutes\" \"Bacilli\"  \"Lactobacillales\" ## 9606 \"Eukaryota\"  \"Chordata\"   \"Mammalia\" \"Primates\" ##      family             genus           species ## 1313 \"Streptococcaceae\" \"Streptococcus\" \"Streptococcus pneumoniae\" ## 9606 \"Hominidae\"        \"Homo\"          \"Homo sapiens\" taxaId<-accessionToTaxa(c(\"LN847353\",\"AL079352\"),\"accessionTaxa.sql\") print(taxaId) ## [1] NA NA taxaId<-accessionToTaxa(c(\"LN847353\",\"AL079352\"),\"accessionTaxa.sql\",version='base') print(taxaId) ## [1] 1313 9606"},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"finding-taxonomy-for-taxonomic-names","dir":"","previous_headings":"Assigning taxonomy","what":"Finding taxonomy for taxonomic names","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"’d like find IDs taxonomic names can something like: get taxonomy IDs use getTaxonomy:","code":"taxaId<-getId(c('Homo sapiens','Bos taurus','Homo','Alces alces'),'accessionTaxa.sql') print(taxaId) ## [1] \"9606\" \"9913\" \"9605\" \"9852\" taxa<-getTaxonomy(taxaId,'accessionTaxa.sql') print(taxa) ##      superkingdom phylum     class      order      family      genus ## 9606 \"Eukaryota\"  \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Homo\" ## 9913 \"Eukaryota\"  \"Chordata\" \"Mammalia\" NA         \"Bovidae\"   \"Bos\" ## 9605 \"Eukaryota\"  \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Homo\" ## 9852 \"Eukaryota\"  \"Chordata\" \"Mammalia\" NA         \"Cervidae\"  \"Alces\" ##      species ## 9606 \"Homo sapiens\" ## 9913 \"Bos taurus\" ## 9605 NA ## 9852 \"Alces alces\""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"finding-descendants-for-a-given-taxa","dir":"","previous_headings":"Assigning taxonomy","what":"Finding descendants for a given taxa","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"function getDescents can used find descendants taxonomic level given taxa. example find species (default) Homininae subfamily (taxonomic ID 207598): genuses: Note index nodes table added v0.10.1 make run faster. database created prior v0.10.1 need maximum speed finding descendants please regenerate database.","code":"getDescendants(207598,'accessionTaxa.sql') ## [1] \"Gorilla gorilla\"                   \"Gorilla beringei\" ## [3] \"Pan paniscus\"                      \"Pan troglodytes\" ## [5] \"Homo sapiens\"                      \"Homo heidelbergensis\" ## [7] \"Homo sapiens environmental sample\" \"Homo sp.\" getDescendants(207598,'accessionTaxa.sql','genus') ## [1] \"Gorilla\" \"Pan\"     \"Homo\""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"finding-common-names-for-taxonomic-ids","dir":"","previous_headings":"Assigning taxonomy","what":"Finding common names for taxonomic IDs","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"’d like find common types names given taxa ID can use getCommon: specify certain type(s) name (“common” names seem often split “common name” “genbank common name”): Note databases created taxonomizr versions earlier v0.9.4 contain type field database reloaded use function. example, done calling:","code":"getCommon(c(9913,9606),'accessionTaxa.sql') ## [[1]] ##                         name                type ## 1                  Bos bovis             synonym ## 2     Bos primigenius taurus             synonym ## 3  Bos taurus Linnaeus, 1758           authority ## 4                 Bos taurus     scientific name ## 5      Bovidae sp. Adi Nefas            includes ## 6                     bovine         common name ## 7                     cattle genbank common name ## 8                        cow         common name ## 9                  dairy cow         common name ## 10           domestic cattle         common name ## 11              domestic cow         common name ## 12                        ox         common name ## 13                      oxen         common name ## ## [[2]] ##                          name                type ## 1 Homo sapiens Linnaeus, 1758           authority ## 2                Homo sapiens     scientific name ## 3                       human genbank common name getCommon(c(9913,9606,9894),'accessionTaxa.sql',c('genbank common name','common name')) ## [[1]] ##              name                type ## 1          bovine         common name ## 2          cattle genbank common name ## 3             cow         common name ## 4       dairy cow         common name ## 5 domestic cattle         common name ## 6    domestic cow         common name ## 7              ox         common name ## 8            oxen         common name ## ## [[2]] ##    name                type ## 1 human genbank common name ## ## [[3]] ##      name                type ## 1 giraffe genbank common name taxonomizr::getNamesAndNodes() taxonomizr::read.names.sql('names.dmp','nameNode.sqlite',overwrite=TRUE)"},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"condensing-taxonomy-aka-lowest-common-ancestor-lca","dir":"","previous_headings":"Assigning taxonomy","what":"Condensing taxonomy a.k.a. lowest common ancestor LCA","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"can use condenseTaxa function find agreements among taxonomic hits. example condense taxonomy previous section lowest taxonomic rank shared three taxa: function can also fed large number grouped hits, e.g. BLAST hits high throughput sequencing reads filtering best hits read, output condensed taxonomy grouping:","code":"condenseTaxa(taxa) ##   superkingdom phylum     class      order family genus species ## 1 \"Eukaryota\"  \"Chordata\" \"Mammalia\" NA    NA     NA    NA groupings<-c('read1','read2','read1','read2') condenseTaxa(taxa,groupings) ##       superkingdom phylum     class      order      family      genus ## read1 \"Eukaryota\"  \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Homo\" ## read2 \"Eukaryota\"  \"Chordata\" \"Mammalia\" NA         NA          NA ##       species ## read1 NA ## read2 NA"},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"find-all-taxonomic-assignments-for-a-given-taxa","dir":"","previous_headings":"Assigning taxonomy","what":"Find all taxonomic assignments for a given taxa","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"get taxonomic assignments given taxa regardless particular rank, can use getRawTaxonomy function. Note often many intermediate ranks outside common taxonomic ranks. function returns list since different IDs can differing numbers ranks. used similarly getTaxonomy: raw taxonomy varying numbers levels can normalized taxa share number levels (aligning taxonomic levels unspecific “clade”) using normalizeTaxa function: normalizeTaxa best figure order taxonomic levels automatically can sometimes left ambiguous cases. result error like: ’s saying algorithm unclear data whether suborder infraorder specific taxonomic level. clarify, give lineageOrder parameter vector going least specific like: especially troublesome sets, may repeat step several times getting new error time find ambiguities. result building vector specifying ordering several ambiguous levels like:","code":"getRawTaxonomy(c(9606,9913),'accessionTaxa.sql') ## $`9606` ##                species                  genus              subfamily ##         \"Homo sapiens\"                 \"Homo\"            \"Homininae\" ##                 family            superfamily              parvorder ##            \"Hominidae\"           \"Hominoidea\"           \"Catarrhini\" ##             infraorder               suborder                  order ##          \"Simiiformes\"          \"Haplorrhini\"             \"Primates\" ##             superorder                  clade                clade.1 ##     \"Euarchontoglires\"        \"Boreoeutheria\"             \"Eutheria\" ##                clade.2                  class                clade.3 ##               \"Theria\"             \"Mammalia\"              \"Amniota\" ##                clade.4                class.1             superclass ##            \"Tetrapoda\" \"Dipnotetrapodomorpha\"        \"Sarcopterygii\" ##                clade.5                clade.6                clade.7 ##         \"Euteleostomi\"           \"Teleostomi\"        \"Gnathostomata\" ##                clade.8              subphylum                 phylum ##           \"Vertebrata\"             \"Craniata\"             \"Chordata\" ##                clade.9               clade.10               clade.11 ##        \"Deuterostomia\"            \"Bilateria\"            \"Eumetazoa\" ##                kingdom               clade.12           superkingdom ##              \"Metazoa\"         \"Opisthokonta\"            \"Eukaryota\" ##                no rank ##   \"cellular organisms\" ## ## $`9913` ##                species                  genus              subfamily ##           \"Bos taurus\"                  \"Bos\"              \"Bovinae\" ##                 family             infraorder               suborder ##              \"Bovidae\"               \"Pecora\"           \"Ruminantia\" ##                  order             superorder                  clade ##         \"Artiodactyla\"       \"Laurasiatheria\"        \"Boreoeutheria\" ##                clade.1                clade.2                  class ##             \"Eutheria\"               \"Theria\"             \"Mammalia\" ##                clade.3                clade.4                class.1 ##              \"Amniota\"            \"Tetrapoda\" \"Dipnotetrapodomorpha\" ##             superclass                clade.5                clade.6 ##        \"Sarcopterygii\"         \"Euteleostomi\"           \"Teleostomi\" ##                clade.7                clade.8              subphylum ##        \"Gnathostomata\"           \"Vertebrata\"             \"Craniata\" ##                 phylum                clade.9               clade.10 ##             \"Chordata\"        \"Deuterostomia\"            \"Bilateria\" ##               clade.11                kingdom               clade.12 ##            \"Eumetazoa\"              \"Metazoa\"         \"Opisthokonta\" ##           superkingdom                no rank ##            \"Eukaryota\"   \"cellular organisms\" raw<-getRawTaxonomy(c(9606,9913),'accessionTaxa.sql') normalizeTaxa(raw) ##      no rank              superkingdom superkingdom.1 kingdom   kingdom.1 ## 9606 \"cellular organisms\" \"Eukaryota\"  \"Opisthokonta\" \"Metazoa\" \"Eumetazoa\" ## 9913 \"cellular organisms\" \"Eukaryota\"  \"Opisthokonta\" \"Metazoa\" \"Eumetazoa\" ##      kingdom.2   kingdom.3       phylum     subphylum  subphylum.1 ## 9606 \"Bilateria\" \"Deuterostomia\" \"Chordata\" \"Craniata\" \"Vertebrata\" ## 9913 \"Bilateria\" \"Deuterostomia\" \"Chordata\" \"Craniata\" \"Vertebrata\" ##      subphylum.2     subphylum.3  subphylum.4    superclass ## 9606 \"Gnathostomata\" \"Teleostomi\" \"Euteleostomi\" \"Sarcopterygii\" ## 9913 \"Gnathostomata\" \"Teleostomi\" \"Euteleostomi\" \"Sarcopterygii\" ##      superclass.1           superclass.2 superclass.3 class      class.1 ## 9606 \"Dipnotetrapodomorpha\" \"Tetrapoda\"  \"Amniota\"    \"Mammalia\" \"Theria\" ## 9913 \"Dipnotetrapodomorpha\" \"Tetrapoda\"  \"Amniota\"    \"Mammalia\" \"Theria\" ##      class.2    class.3         superorder         order          suborder ## 9606 \"Eutheria\" \"Boreoeutheria\" \"Euarchontoglires\" \"Primates\"     \"Haplorrhini\" ## 9913 \"Eutheria\" \"Boreoeutheria\" \"Laurasiatheria\"   \"Artiodactyla\" \"Ruminantia\" ##      infraorder    parvorder    superfamily  family      subfamily   genus ## 9606 \"Simiiformes\" \"Catarrhini\" \"Hominoidea\" \"Hominidae\" \"Homininae\" \"Homo\" ## 9913 \"Pecora\"      NA           NA           \"Bovidae\"   \"Bovinae\"   \"Bos\" ##      species ## 9606 \"Homo sapiens\" ## 9913 \"Bos taurus\" Error in topoSort(c(nonClade, list(lineageOrder)), errorIfAmbiguous = TRUE) :   Ambiguous ordering found in topoSort (suborder vs infraorder) normalizeTaxa(raw,lineageOrder=c('infraorder','suborder')) normalizeTaxa(raw,lineageOrder=c('infraorder','suborder','superorder','infraclass','subclass','class'))"},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"finding-accessions-for-a-given-taxonomic-id","dir":"","previous_headings":"Assigning taxonomy","what":"Finding accessions for a given taxonomic ID","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"find accessions given taxonomic ID, can use getAccessions function. bit unusual use case preserve space, index created default read.accession2taxid. going use function, want rebuild SQLite database indexTaxa argument set true something like: can get accessions taxa 3702 command like (note limit argument used order preserve space):","code":"read.accession2taxid(list.files('.','accession2taxid.gz$'),'accessionTaxa.sql',indexTaxa=TRUE,overwrite=TRUE) ## Reading nucl_gb.accession2taxid.gz. ## Reading nucl_wgs.accession2taxid.gz. ## Reading in values. This may take a while. ## Adding index. This may also take a while. getAccessions(3702,'accessionTaxa.sql',limit=10) ##    taxa accession ## 1  3702  X58148.1 ## 2  3702  X66414.1 ## 3  3702  X60045.1 ## 4  3702  X07376.1 ## 5  3702  X54927.1 ## 6  3702  X54926.1 ## 7  3702  X54928.1 ## 8  3702  X54930.1 ## 9  3702  X54929.1 ## 10 3702  X52320.1"},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"convert-taxonomy-to-newick-tree","dir":"","previous_headings":"Assigning taxonomy","what":"Convert taxonomy to Newick tree","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"probably useful specific cases convenience function makeNewick convert taxonomy Newick tree included. function takes matrix columns corresponding taxonomic categories rows corresponding taxonomic assignments, e.g. output condenseTaxa getTaxonomy normalizeTaxa reduces Newick formatted tree. example: quotes needed, specify quote argument: default, makeNewick includes trailing nodes NA tree e.g.: nodes desired set excludeTerminalNAs FALSE: Note taxa may specific taxon given taxa taxonomy matrix leaf resulting tree appears taxonomy e.g. Chordata example.","code":"taxa ##      [,1]        [,2]       [,3]       [,4]       [,5]        [,6] ## [1,] \"Eukaryota\" \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Homo\" ## [2,] \"Eukaryota\" \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Pan\" ## [3,] \"Eukaryota\" \"Chordata\" \"Mammalia\" NA         \"Cervidae\"  \"Alces\" makeNewick(taxa) ## [1] \"((((((Homo,Pan)Hominidae)Primates,((Alces)Cervidae)_)Mammalia)Chordata)Eukaryota);\" makeNewick(taxa,quote=\"'\") ## [1] \"(((((('Homo','Pan')'Hominidae')'Primates',(('Alces')'Cervidae')_)'Mammalia')'Chordata')'Eukaryota');\" taxa[3,3:6]<-NA print(taxa) ##      [,1]        [,2]       [,3]       [,4]       [,5]        [,6] ## [1,] \"Eukaryota\" \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Homo\" ## [2,] \"Eukaryota\" \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Pan\" ## [3,] \"Eukaryota\" \"Chordata\" NA         NA         NA          NA makeNewick(taxa) ## [1] \"((((((Homo,Pan)Hominidae)Primates)Mammalia,(((_)_)_)_)Chordata)Eukaryota);\" makeNewick(taxa,excludeTerminalNAs=TRUE) ## [1] \"((((((Homo,Pan)Hominidae)Primates)Mammalia)Chordata)Eukaryota);\""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"note-ncbi-name-changes-in-early-2023","dir":"","previous_headings":"","what":"Note: NCBI name changes in early 2023","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Please note NCBI change naming several major prokaryote phylums e.g. Firmicutes became Bacillota early 2023. Please watch problems arise. example: * names assigned taxonomy may shift updating database post-change version * comparisons old analyses performed pre-change new analyses performed post-change need done care understand things correctly, actual taxonomy ID change might wise retain taxonomy ID analyses. final analysis, taxonomic names can assigned based whatever naming scheme use time.","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v0111","dir":"","previous_headings":"Changelog","what":"v0.11.1","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Change superkingdom domain default taxonomic levels match NCBI changes","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v0108","dir":"","previous_headings":"Changelog","what":"v0.10.8","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Add getNames option getTaxonomy return taxon IDs rather taxon names Deal with_mock deprecation test code pkgdown changes","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v0107","dir":"","previous_headings":"Changelog","what":"v0.10.7","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Store nodes table’s parent column INT instead REAL","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v0106","dir":"","previous_headings":"Changelog","what":"v0.10.6","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Fix test error message variable across platforms","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v0105","dir":"","previous_headings":"Changelog","what":"v0.10.5","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Catch 404 errors report errors Add resume argument download functions Don’t retain temp files downloads less 10kb README touchups","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v0104","dir":"","previous_headings":"Changelog","what":"v0.10.4","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Minor improvement output md5 modification date downloads aid debugging network issues","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v0103","dir":"","previous_headings":"Changelog","what":"v0.10.3","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Minor fix prevent accessionToTaxa hanging given numeric inputs","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v0102","dir":"","previous_headings":"Changelog","what":"v0.10.2","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Behind scenes switch multi_download function curl package allow download resumption interrupted downloads. adds dependency curl package >=5.0.0. Add protocol option choose FTP HTTP protocols downloading. two protocols perform similarly relative speeds NCBI’s ftp http servers seem vary probably whole lot reason choose one unless firewall blocking FTP ports.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v0101","dir":"","previous_headings":"Changelog","what":"v0.10.1","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Add getDescendants function get descendants given taxon","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v094","dir":"","previous_headings":"Changelog","what":"v0.9.4","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Add getCommon function get names database given taxa ID","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v093","dir":"","previous_headings":"Changelog","what":"v0.9.3","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Fix bug testing script","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v092","dir":"","previous_headings":"Changelog","what":"v0.9.2","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Allow factors input accessionToTaxa Document sqlite pragmas read.accession2taxid Inherit … argument documentation prepareDatabase Catch input/output error processing large files Update various user-facing links ftp https easier access","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v084","dir":"","previous_headings":"Changelog","what":"v0.8.4","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Add quote option makeNewick Trim trailing NAs tree makeNewick excludeTerminalNAs TRUE Add terminal semicolon end makeNewick tree unless terminator NULL","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v083","dir":"","previous_headings":"Changelog","what":"v0.8.3","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Add “rank” normalizeTaxa’s default exclusion Expand README","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v082","dir":"","previous_headings":"Changelog","what":"v0.8.2","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Add normalizeTaxa function","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v081","dir":"","previous_headings":"Changelog","what":"v0.8.1","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Fix minor typos","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v080","dir":"","previous_headings":"Changelog","what":"v0.8.0","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Switch curl::curl_download avoid Windows issues","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v071","dir":"","previous_headings":"Changelog","what":"v0.7.1","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Add md5 check downloads","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v070","dir":"","previous_headings":"Changelog","what":"v0.7.0","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Add getRawTaxonomy function Add option download accessions","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v060","dir":"","previous_headings":"Changelog","what":"v0.6.0","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Fix named vector bug accessionToTaxa Add makeNewick function Deal default 60 second timeout downloads R","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v053","dir":"","previous_headings":"Changelog","what":"v0.5.3","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Remove nucl_est nucl_gss defaults since NCBI folded nucl_gb removed Squash R:devel bug","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"v050","dir":"","previous_headings":"Changelog","what":"v0.5.0","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Transitioned data.table SQLite Addeded convenience prepareDatabase() function Squashed Windows testing errors","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"manual-preparation-of-database-usually-not-necessary","dir":"","previous_headings":"","what":"Manual preparation of database (usually not necessary)","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Note: Since version 0.5.0, usually necessary run following manually, function prepareDatabase() automatically (see ). order avoid constant internet access slow APIs, first step using package downloads necessary files NCBI. uses bit disk space makes future access reliable fast. Note: necessary manually check presence files since functions automatically check see output present skip downloading/processing. Delete local files like redownload reprocess .","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"download-names-and-nodes","dir":"","previous_headings":"Manual preparation of database (usually not necessary)","what":"Download names and nodes","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"First, download necessary names nodes files NCBI:","code":"getNamesAndNodes() ## [1] \"./names.dmp\" \"./nodes.dmp\""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"download-accession-to-taxa-files","dir":"","previous_headings":"Manual preparation of database (usually not necessary)","what":"Download accession to taxa files","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"download accession taxa id conversion files NCBI. Note: pretty big download (several gigabytes): also like identify protein accession numbers, also download prot file NCBI (big download):","code":"#this is a big download getAccession2taxid() ## This can be a big (several gigabytes) download. Please be patient and use a fast connection. ## [1] \"./nucl_gb.accession2taxid.gz\"  \"./nucl_wgs.accession2taxid.gz\" #this is a big download getAccession2taxid(types='prot') ## This can be a big (several gigabytes) download. Please be patient and use a fast connection. ## [1] \"./prot.accession2taxid.gz\""},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"convert-names-nodes-and-accessions-to-database","dir":"","previous_headings":"Manual preparation of database (usually not necessary)","what":"Convert names, nodes and accessions to database","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"process downloaded names nodes files easily accessed form: Next process downloaded accession files database (one take ): Now everything ready processing. files cached locally preparation required (whenever like update data). necessary manually check presence files since functions automatically check see output present skip downloading/processing. Delete local files like redownload reprocess .","code":"read.names.sql('names.dmp','accessionTaxa.sql') read.nodes.sql('nodes.dmp','accessionTaxa.sql') read.accession2taxid(list.files('.','accession2taxid.gz$'),'accessionTaxa.sql') ## Reading nucl_gb.accession2taxid.gz. ## Reading nucl_wgs.accession2taxid.gz. ## Reading prot.accession2taxid.gz. ## Reading in values. This may take a while. ## Adding index. This may also take a while."},{"path":"https://github.com/sherrillmix/taxonomizr/index.html","id":"switch-from-datatable-to-sqlite","dir":"","previous_headings":"","what":"Switch from data.table to SQLite","title":"Functions to Work with NCBI Accessions and Taxonomy","text":"Version 0.5.0 marked change name node lookups using data.table using SQLite. necessary increase performance (10-100x speedup getTaxonomy) create simpler interface (single SQLite database contains necessary data). Unfortunately, switch requires couple breaking changes: * getTaxonomy changes getTaxonomy(ids,namesDT,nodesDT) getTaxonomy(ids,sqlFile) * getId changes getId(taxa,namesDT) getId(taxa,sqlFile) * read.names deprecated, instead use read.names.sql. example, instead calling names<-read.names('names.dmp') every session, simply call read.names.sql('names.dmp','accessionTaxa.sql') (use convenient prepareDatabase )). * read.nodes deprecated, instead use read.names.sql. example. instead calling nodes<-read.names('nodes.dmp') every session, simply call read.nodes.sql('nodes.dmp','accessionTaxa.sql') (use convenient prepareDatabase ). ’ve tried ease problems overloading getTaxonomy getId still function (warning) passed data.table names nodes argument providing simpler prepareDatabase function completing setup steps (hopefully avoiding direct calls read.names read.nodes users). plan eventually remove data.table functionality avoid split codebase please switch new SQLite format new code.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/accessionToTaxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert accessions to taxa — accessionToTaxa","title":"Convert accessions to taxa — accessionToTaxa","text":"Convert vector NCBI accession numbers assigned taxonomy","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/accessionToTaxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert accessions to taxa — accessionToTaxa","text":"","code":"accessionToTaxa(accessions, sqlFile, version = c(\"version\", \"base\"))"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/accessionToTaxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert accessions to taxa — accessionToTaxa","text":"accessions vector NCBI accession strings convert taxa sqlFile string giving path SQLite file screated read.accession2taxid version either 'version' indicating taxaids versioned e.g. Z17427.1 'base' indicating taxaids version numbers e.g. Z17427","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/accessionToTaxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert accessions to taxa — accessionToTaxa","text":"vector NCBI taxa ids","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/accessionToTaxa.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert accessions to taxa — accessionToTaxa","text":"https://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/accessionToTaxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert accessions to taxa — accessionToTaxa","text":"","code":"taxa<-c(  \"accession\\taccession.version\\ttaxid\\tgi\",  \"Z17427\\tZ17427.1\\t3702\\t16569\",  \"Z17428\\tZ17428.1\\t3702\\t16570\",  \"Z17429\\tZ17429.1\\t3702\\t16571\",  \"Z17430\\tZ17430.1\\t3702\\t16572\",  \"X62402\\tX62402.1\\t9606\\t30394\" ) inFile<-tempfile() sqlFile<-tempfile() writeLines(taxa,inFile) read.accession2taxid(inFile,sqlFile,vocal=FALSE) accessionToTaxa(c(\"Z17430.1\",\"Z17429.1\",\"X62402.1\",'NOTREAL'),sqlFile) #> [1] 3702 3702 9606   NA"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/condenseTaxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Condense multiple taxonomic assignments to their most recent common branch — condenseTaxa","title":"Condense multiple taxonomic assignments to their most recent common branch — condenseTaxa","text":"Take table taxonomic assignments, e.g. assignments hits read, condense single vector NAs disagreements hits.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/condenseTaxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Condense multiple taxonomic assignments to their most recent common branch — condenseTaxa","text":"","code":"condenseTaxa(taxaTable, groupings = rep(1, nrow(taxaTable)))"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/condenseTaxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Condense multiple taxonomic assignments to their most recent common branch — condenseTaxa","text":"taxaTable matrix data.frame hits rows various levels taxonomy columns groupings vector groups e.g. read queries condense taxa within","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/condenseTaxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Condense multiple taxonomic assignments to their most recent common branch — condenseTaxa","text":"matrix ncol(taxaTable) taxonomy columns row unique id (labelled rownames) NAs complete agreement id","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/condenseTaxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Condense multiple taxonomic assignments to their most recent common branch — condenseTaxa","text":"","code":"taxas<-matrix(c(  'a','b','c','e',  'a','b','d','e' ),nrow=2,byrow=TRUE) condenseTaxa(taxas) #>   V1  V2  V3 V4 #> 1 \"a\" \"b\" NA NA condenseTaxa(taxas[c(1,2,2),],c(1,1,2)) #>   V1  V2  V3  V4  #> 1 \"a\" \"b\" NA  NA  #> 2 \"a\" \"b\" \"d\" \"e\""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getAccession2taxid.html","id":null,"dir":"Reference","previous_headings":"","what":"Download accession2taxid files from NCBI — getAccession2taxid","title":"Download accession2taxid files from NCBI — getAccession2taxid","text":"Download nucl_xxx.accession2taxid.gz NCBI servers. can used create SQLite datanase read.accession2taxid. Note files already exist target directory function redownload . Delete files fresh download desired.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getAccession2taxid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download accession2taxid files from NCBI — getAccession2taxid","text":"","code":"getAccession2taxid(   outDir = \".\",   baseUrl = sprintf(\"%s://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/\", protocol),   types = c(\"nucl_gb\", \"nucl_wgs\"),   protocol = \"ftp\",   resume = TRUE )"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getAccession2taxid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download accession2taxid files from NCBI — getAccession2taxid","text":"outDir directory put accession2taxid.gz files baseUrl url directory accession2taxid.gz files located types types accession2taxid.gz files desired type prefix xxx.accession2taxid.gz. default download nucl_ accessions. protein accessions, try types=c('prot'). protocol protocol used downloading. Probably either 'http' 'ftp'. Overridden baseUrl provided directly resume TRUE attempt resume downloading interrupted file without starting beginning","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getAccession2taxid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download accession2taxid files from NCBI — getAccession2taxid","text":"vector file path strings locations output files","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getAccession2taxid.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download accession2taxid files from NCBI — getAccession2taxid","text":"https://ftp.ncbi.nih.gov/pub/taxonomy/, https://www.ncbi.nlm.nih.gov/genbank/acc_prefix/","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getAccession2taxid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download accession2taxid files from NCBI — getAccession2taxid","text":"","code":"if (FALSE) { # \\dontrun{   if(readline(     \"This will download a lot data and take a while to process.      Make sure you have space and bandwidth. Type y to continue: \"   )!='y')     stop('This is a stop to make sure no one downloads a bunch of data unintentionally')    getAccession2taxid() } # }"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getAccessions.html","id":null,"dir":"Reference","previous_headings":"","what":"Find all accessions for a taxa — getAccessions","title":"Find all accessions for a taxa — getAccessions","text":"Find accessions numbers given taxa ID NCBI taxonomy. pretty slow unless database built indexTaxa=TRUE since database index taxaId.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getAccessions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find all accessions for a taxa — getAccessions","text":"","code":"getAccessions(taxaId, sqlFile, version = c(\"version\", \"base\"), limit = NULL)"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getAccessions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find all accessions for a taxa — getAccessions","text":"taxaId vector taxonomic IDs sqlFile string giving path SQLite file created read.accession2taxid version either 'version' indicating taxaids versioned e.g. Z17427.1 'base' indicating taxaids version numbers e.g. Z17427 limit return number accessions NULL limits","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getAccessions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find all accessions for a taxa — getAccessions","text":"vector character strings giving taxa IDs (potentially comma concatenated taxa ambiguous names)","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getAccessions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find all accessions for a taxa — getAccessions","text":"","code":"taxa<-c(   \"accession\\taccession.version\\ttaxid\\tgi\",   \"Z17427\\tZ17427.1\\t3702\\t16569\",   \"Z17428\\tZ17428.1\\t3702\\t16570\",   \"Z17429\\tZ17429.1\\t3702\\t16571\",   \"Z17430\\tZ17430.1\\t3702\\t16572\" ) inFile<-tempfile() sqlFile<-tempfile() writeLines(taxa,inFile) read.accession2taxid(inFile,sqlFile,vocal=FALSE) getAccessions(3702,sqlFile) #>   taxa accession #> 1 3702  Z17427.1 #> 2 3702  Z17428.1 #> 3 3702  Z17429.1 #> 4 3702  Z17430.1"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getCommon.html","id":null,"dir":"Reference","previous_headings":"","what":"Find common names for a given taxa — getCommon","title":"Find common names for a given taxa — getCommon","text":"Find common names recorded taxa NCBI taxonomy. Use getTaxonomy scientific names.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getCommon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find common names for a given taxa — getCommon","text":"","code":"getCommon(taxa, sqlFile = \"nameNode.sqlite\", types = NULL)"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getCommon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find common names for a given taxa — getCommon","text":"taxa vector accession numbers sqlFile string giving path SQLite file containing names tables types vector strings giving type names desired e.g. \"common name\". NULL types returned","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getCommon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find common names for a given taxa — getCommon","text":"named list data.frames element corresponds query taxa IDs. data.frame contains columns name type gives available names name type","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getCommon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find common names for a given taxa — getCommon","text":"","code":"namesText<-\"9894\\t|\\tGiraffa camelopardalis (Linnaeus, 1758)\\t|\\t\\t|\\tauthority\\t| 9894\\t|\\tGiraffa camelopardalis\\t|\\t\\t|\\tscientific name\\t| 9894\\t|\\tgiraffe\\t|\\t\\t|\\tgenbank common name\\t| 9909\\t|\\taurochs\\t|\\t\\t|\\tgenbank common name\\t| 9909\\t|\\tBos primigenius Bojanus, 1827\\t|\\t\\t|\\tauthority\\t| 9909\\t|\\tBos primigenius\\t|\\t\\t|\\tscientific name\\t| 9913\\t|\\tBos bovis\\t|\\t\\t|\\tsynonym\\t| 9913\\t|\\tBos primigenius taurus\\t|\\t\\t|\\tsynonym\\t| 9913\\t|\\tBos taurus Linnaeus, 1758\\t|\\t\\t|\\tauthority\\t| 9913\\t|\\tBos taurus\\t|\\t\\t|\\tscientific name\\t| 9913\\t|\\tBovidae sp. Adi Nefas\\t|\\t\\t|\\tincludes\\t| 9913\\t|\\tbovine\\t|\\t\\t|\\tcommon name\\t| 9913\\t|\\tcattle\\t|\\t\\t|\\tgenbank common name\\t| 9913\\t|\\tcow\\t|\\t\\t|\\tcommon name\\t| 9913\\t|\\tdairy cow\\t|\\t\\t|\\tcommon name\\t| 9913\\t|\\tdomestic cattle\\t|\\t\\t|\\tcommon name\\t| 9913\\t|\\tdomestic cow\\t|\\t\\t|\\tcommon name\\t| 9913\\t|\\tox\\t|\\t\\t|\\tcommon name\\t| 9913\\t|\\toxen\\t|\\t\\t|\\tcommon name\\t| 9916\\t|\\tBoselaphus\\t|\\t\\t|\\tscientific name\\t|\" tmpFile<-tempfile() writeLines(namesText,tmpFile) sqlFile<-tempfile() read.names.sql(tmpFile,sqlFile) getCommon(9909,sqlFile) #> [[1]] #>                            name                type #> 1                       aurochs genbank common name #> 2 Bos primigenius Bojanus, 1827           authority #> 3               Bos primigenius     scientific name #>  sapply(getCommon(c(9894,9913),sqlFile),function(xx)paste(xx$name,collapse='; ')) #> [1] \"Giraffa camelopardalis (Linnaeus, 1758); Giraffa camelopardalis; giraffe\"                                                                                                 #> [2] \"Bos bovis; Bos primigenius taurus; Bos taurus Linnaeus, 1758; Bos taurus; Bovidae sp. Adi Nefas; bovine; cattle; cow; dairy cow; domestic cattle; domestic cow; ox; oxen\" getCommon(c(9999999,9916,9894,9913),sqlFile,c(\"common name\",\"genbank common name\")) #> [[1]] #> NULL #>  #> [[2]] #> NULL #>  #> [[3]] #>      name                type #> 1 giraffe genbank common name #>  #> [[4]] #>              name                type #> 1          bovine         common name #> 2          cattle genbank common name #> 3             cow         common name #> 4       dairy cow         common name #> 5 domestic cattle         common name #> 6    domestic cow         common name #> 7              ox         common name #> 8            oxen         common name #>"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getDescendants.html","id":null,"dir":"Reference","previous_headings":"","what":"Get descendant ranks for a taxa — getDescendants","title":"Get descendant ranks for a taxa — getDescendants","text":"Take NCBI taxa ID get descendant taxa matching given rank name node SQLite database","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getDescendants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get descendant ranks for a taxa — getDescendants","text":"","code":"getDescendants(ids, sqlFile = \"nameNode.sqlite\", desiredTaxa = \"species\")"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getDescendants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get descendant ranks for a taxa — getDescendants","text":"ids vector ids find descendants sqlFile string giving path SQLite file containing names nodes tables desiredTaxa vector strings giving desired taxa levels","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getDescendants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get descendant ranks for a taxa — getDescendants","text":"vector strings giving names descendant taxa","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getDescendants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get descendant ranks for a taxa — getDescendants","text":"","code":"sqlFile<-tempfile() namesText<-c(   \"1\\t|\\troot\\t|\\t\\t|\\tscientific name\\t|\",   \"2\\t|\\tBacteria\\t|\\tBacteria <prokaryotes>\\t|\\tscientific name\\t|\",   \"2\\t|\\tProcaryotae\\t|\\tProcaryotae <Bacteria>\\t|\\tin-part\\t|\",   \"9606\\t|\\tHomo sapiens\\t|\\t\\t|\\tscientific name\",   \"9605\\t|\\tHomo\\t|\\t\\t|\\tscientific name\",   \"207598\\t|\\tHomininae\\t|\\t\\t|\\tscientific name\",   \"9604\\t|\\tHominidae\\t|\\t\\t|\\tscientific name\",   \"314295\\t|\\tHominoidea\\t|\\t\\t|\\tscientific name\",   \"9526\\t|\\tCatarrhini\\t|\\t\\t|\\tscientific name\",   \"314293\\t|\\tSimiiformes\\t|\\t\\t|\\tscientific name\",   \"376913\\t|\\tHaplorrhini\\t|\\t\\t|\\tscientific name\",   \"9443\\t|\\tPrimates\\t|\\t\\t|\\tscientific name\",   \"314146\\t|\\tEuarchontoglires\\t|\\t\\t|\\tscientific name\",   \"1437010\\t|\\tBoreoeutheria\\t|\\t\\t|\\tscientific name\",   \"9347\\t|\\tEutheria\\t|\\t\\t|\\tscientific name\",   \"32525\\t|\\tTheria\\t|\\t\\t|\\tscientific name\",   \"40674\\t|\\tMammalia\\t|\\t\\t|\\tscientific name\",   \"32524\\t|\\tAmniota\\t|\\t\\t|\\tscientific name\",   \"32523\\t|\\tTetrapoda\\t|\\t\\t|\\tscientific name\",   \"1338369\\t|\\tDipnotetrapodomorpha\\t|\\t\\t|\\tscientific name\",   \"8287\\t|\\tSarcopterygii\\t|\\t\\t|\\tscientific name\",   \"117571\\t|\\tEuteleostomi\\t|\\t\\t|\\tscientific name\",   \"117570\\t|\\tTeleostomi\\t|\\t\\t|\\tscientific name\",   \"7776\\t|\\tGnathostomata\\t|\\t\\t|\\tscientific name\",   \"7742\\t|\\tVertebrata\\t|\\t\\t|\\tscientific name\",   \"89593\\t|\\tCraniata\\t|\\t\\t|\\tscientific name\",   \"7711\\t|\\tChordata\\t|\\t\\t|\\tscientific name\",   \"33511\\t|\\tDeuterostomia\\t|\\t\\t|\\tscientific name\",   \"33213\\t|\\tBilateria\\t|\\t\\t|\\tscientific name\",   \"6072\\t|\\tEumetazoa\\t|\\t\\t|\\tscientific name\",   \"33208\\t|\\tMetazoa\\t|\\t\\t|\\tscientific name\",   \"33154\\t|\\tOpisthokonta\\t|\\t\\t|\\tscientific name\",   \"2759\\t|\\tEukaryota\\t|\\t\\t|\\tscientific name\",   \"131567\\t|\\tcellular organisms\\t|\\t\\t|\\tscientific name\",   \"1425170\\t|\\tHomo heidelbergensis\\t|\\t\\t|\\tscientific name\" ) tmpFile<-tempfile() writeLines(namesText,tmpFile) taxaNames<-read.names.sql(tmpFile,sqlFile) nodesText<-c(  \"1\\t|\\t1\\t|\\tno rank\\t|\\t\\t|\\t8\\t|\\t0\\t|\\t1\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t\\t|\",   \"2\\t|\\t131567\\t|\\tdomain\\t|\\t\\t|\\t0\\t|\\t0\\t|\\t11\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t\\t|\",   \"6\\t|\\t335928\\t|\\tgenus\\t|\\t\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t0\\t|\\t0\\t|\\t\\t|\",   \"7\\t|\\t6\\t|\\tspecies\\t|\\tAC\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t1\\t|\\t0\\t|\\t\\t|\",   \"9\\t|\\t32199\\t|\\tspecies\\t|\\tBA\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t1\\t|\\t0\\t|\\t\\t|\",   \"9606\\t|\\t9605\\t|\\tspecies\", \"9605\\t|\\t207598\\t|\\tgenus\", \"207598\\t|\\t9604\\t|\\tsubfamily\",   \"9604\\t|\\t314295\\t|\\tfamily\", \"314295\\t|\\t9526\\t|\\tsuperfamily\",   \"9526\\t|\\t314293\\t|\\tparvorder\", \"314293\\t|\\t376913\\t|\\tinfraorder\",   \"376913\\t|\\t9443\\t|\\tsuborder\", \"9443\\t|\\t314146\\t|\\torder\",   \"314146\\t|\\t1437010\\t|\\tsuperorder\", \"1437010\\t|\\t9347\\t|\\tno rank\",   \"9347\\t|\\t32525\\t|\\tno rank\", \"32525\\t|\\t40674\\t|\\tno rank\",   \"40674\\t|\\t32524\\t|\\tclass\", \"32524\\t|\\t32523\\t|\\tno rank\", \"32523\\t|\\t1338369\\t|\\tno rank\",   \"1338369\\t|\\t8287\\t|\\tno rank\", \"8287\\t|\\t117571\\t|\\tno rank\",   \"117571\\t|\\t117570\\t|\\tno rank\", \"117570\\t|\\t7776\\t|\\tno rank\",   \"7776\\t|\\t7742\\t|\\tno rank\", \"7742\\t|\\t89593\\t|\\tno rank\", \"89593\\t|\\t7711\\t|\\tsubphylum\",   \"7711\\t|\\t33511\\t|\\tphylum\", \"33511\\t|\\t33213\\t|\\tno rank\", \"33213\\t|\\t6072\\t|\\tno rank\",   \"6072\\t|\\t33208\\t|\\tno rank\", \"33208\\t|\\t33154\\t|\\tkingdom\",   \"33154\\t|\\t2759\\t|\\tno rank\", \"2759\\t|\\t131567\\t|\\tdomain\",   \"131567\\t|\\t1\\t|\\tno rank\", '1425170\\t|\\t9605\\t|\\tspecies' ) writeLines(nodesText,tmpFile) taxaNodes<-read.nodes.sql(tmpFile,sqlFile) getDescendants(c(9604),sqlFile) #> [1] \"Homo sapiens\"         \"Homo heidelbergensis\""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getId.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a given taxa by name — getId","title":"Find a given taxa by name — getId","text":"Find taxa string NCBI taxonomy. Note NCBI species stored Genus species e.g. \"Bos taurus\". Ambiguous taxa names return comma concatenated string e.g. \"123,234\" generate warning.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a given taxa by name — getId","text":"","code":"getId(taxa, sqlFile = \"nameNode.sqlite\", onlyScientific = TRUE)"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a given taxa by name — getId","text":"taxa vector taxonomic names sqlFile string giving path SQLite file containing names tables onlyScientific TRUE match scientific names. FALSE use names database matching (potentially increasing ambiguous matches).","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a given taxa by name — getId","text":"vector character strings giving taxa IDs (potentially comma concatenated taxa ambiguous names)","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getId.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find a given taxa by name — getId","text":"","code":"namesText<-c(   \"1\\t|\\tall\\t|\\t\\t|\\tsynonym\\t|\",   \"1\\t|\\troot\\t|\\t\\t|\\tscientific name\\t|\",   \"3\\t|\\tMulti\\t|\\tBacteria <prokaryotes>\\t|\\tscientific name\\t|\",   \"4\\t|\\tMulti\\t|\\tBacteria <prokaryotes>\\t|\\tscientific name\\t|\",   \"2\\t|\\tBacteria\\t|\\tBacteria <prokaryotes>\\t|\\tscientific name\\t|\",   \"2\\t|\\tMonera\\t|\\tMonera <Bacteria>\\t|\\tin-part\\t|\",   \"2\\t|\\tProcaryotae\\t|\\tProcaryotae <Bacteria>\\t|\\tin-part\\t|\" ) tmpFile<-tempfile() writeLines(namesText,tmpFile) sqlFile<-tempfile() read.names.sql(tmpFile,sqlFile) getId('Bacteria',sqlFile) #> [1] \"2\" getId('Not a real name',sqlFile) #> [1] NA getId('Multi',sqlFile) #> Warning: Multiple taxa ids found for Multi. Collapsing with commas #> [1] \"3,4\""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getId2.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a given taxa by name — getId2","title":"Find a given taxa by name — getId2","text":"Find taxa string NCBI taxonomy. Note NCBI species stored Genus species e.g. \"Bos taurus\". Ambiguous taxa names return comma concatenated string e.g. \"123,234\" generate warning. NOTE: function now deprecated getId (using SQLite rather data.table).","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getId2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a given taxa by name — getId2","text":"","code":"getId2(taxa, taxaNames)"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getId2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a given taxa by name — getId2","text":"taxa vector taxonomic names taxaNames names data.table read.names","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getId2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a given taxa by name — getId2","text":"vector character strings giving taxa IDs (potentially comma concatenated taxa ambiguous names)","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getId2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find a given taxa by name — getId2","text":"","code":"namesText<-c(   \"1\\t|\\tall\\t|\\t\\t|\\tsynonym\\t|\",   \"1\\t|\\troot\\t|\\t\\t|\\tscientific name\\t|\",   \"3\\t|\\tMulti\\t|\\tBacteria <prokaryotes>\\t|\\tscientific name\\t|\",   \"4\\t|\\tMulti\\t|\\tBacteria <prokaryotes>\\t|\\tscientific name\\t|\",   \"2\\t|\\tBacteria\\t|\\tBacteria <prokaryotes>\\t|\\tscientific name\\t|\",   \"2\\t|\\tMonera\\t|\\tMonera <Bacteria>\\t|\\tin-part\\t|\",   \"2\\t|\\tProcaryotae\\t|\\tProcaryotae <Bacteria>\\t|\\tin-part\\t|\" ) tmpFile<-tempfile() writeLines(namesText,tmpFile) names<-read.names(tmpFile) #> Warning: taxonomizr is moving from data.table to SQLite databases to improve performance. This will require changing nodes and names processing. Please see ?read.names.sql or ?taxonomizrSwitch getId2('Bacteria',names) #> Warning: taxonomizr is moving from data.table to SQLite databases to improve performance. This will require changing nodes and names processing. Please see ?getId or ?taxonomizrSwitch #> [1] \"2\" getId2('Not a real name',names) #> Warning: taxonomizr is moving from data.table to SQLite databases to improve performance. This will require changing nodes and names processing. Please see ?getId or ?taxonomizrSwitch #> [1] NA getId2('Multi',names) #> Warning: taxonomizr is moving from data.table to SQLite databases to improve performance. This will require changing nodes and names processing. Please see ?getId or ?taxonomizrSwitch #> Warning: Multiple taxa ids found for Multi. Collapsing with commas #> [1] \"3,4\""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getNamesAndNodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Download names and nodes files from NCBI — getNamesAndNodes","title":"Download names and nodes files from NCBI — getNamesAndNodes","text":"Download taxdump.tar.gz file NCBI servers extract names.dmp nodes.dmp files . can used create SQLite database read.names.sql read.nodes.sql. Note files already exist target directory function redownload . Delete files fresh download desired.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getNamesAndNodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download names and nodes files from NCBI — getNamesAndNodes","text":"","code":"getNamesAndNodes(   outDir = \".\",   url = sprintf(\"%s://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz\", protocol),   fileNames = c(\"names.dmp\", \"nodes.dmp\"),   protocol = \"ftp\",   resume = TRUE )"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getNamesAndNodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download names and nodes files from NCBI — getNamesAndNodes","text":"outDir directory put names.dmp nodes.dmp url url taxdump.tar.gz located fileNames filenames desired tar.gz file protocol protocol used downloading. Probably either 'http' 'ftp'. Overridden url provided directly resume TRUE attempt resume downloading interrupted file without starting beginning","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getNamesAndNodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download names and nodes files from NCBI — getNamesAndNodes","text":"vector file path strings locations output files","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getNamesAndNodes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download names and nodes files from NCBI — getNamesAndNodes","text":"https://ftp.ncbi.nih.gov/pub/taxonomy/, https://www.ncbi.nlm.nih.gov/Taxonomy/taxonomyhome.html/","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getNamesAndNodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download names and nodes files from NCBI — getNamesAndNodes","text":"","code":"if (FALSE) { # \\dontrun{   getNamesAndNodes() } # }"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getRawTaxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all taxonomy for a taxa — getRawTaxonomy","title":"Get all taxonomy for a taxa — getRawTaxonomy","text":"Take NCBI taxa IDs get taxonomic ranks name node SQLite database. Ranks occur made unique postfix make.unique","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getRawTaxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all taxonomy for a taxa — getRawTaxonomy","text":"","code":"getRawTaxonomy(ids, sqlFile = \"nameNode.sqlite\")"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getRawTaxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all taxonomy for a taxa — getRawTaxonomy","text":"ids vector ids find taxonomy sqlFile string giving path SQLite file containing names nodes tables","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getRawTaxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all taxonomy for a taxa — getRawTaxonomy","text":"list vectors element containing vector taxonomic strings names corresponding taxonomic rank","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getRawTaxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all taxonomy for a taxa — getRawTaxonomy","text":"","code":"sqlFile<-tempfile() namesText<-c(   \"1\\t|\\tall\\t|\\t\\t|\\tsynonym\\t|\",   \"1\\t|\\troot\\t|\\t\\t|\\tscientific name\\t|\",   \"2\\t|\\tBacteria\\t|\\tBacteria <prokaryotes>\\t|\\tscientific name\\t|\",   \"2\\t|\\tMonera\\t|\\tMonera <Bacteria>\\t|\\tin-part\\t|\",   \"2\\t|\\tProcaryotae\\t|\\tProcaryotae <Bacteria>\\t|\\tin-part\\t|\",   \"9606\\t|\\tHomo sapiens\\t|\\t\\t|\\tscientific name\",   \"9605\\t|\\tHomo\\t|\\t\\t|\\tscientific name\",   \"207598\\t|\\tHomininae\\t|\\t\\t|\\tscientific name\",   \"9604\\t|\\tHominidae\\t|\\t\\t|\\tscientific name\",   \"314295\\t|\\tHominoidea\\t|\\t\\t|\\tscientific name\",   \"9526\\t|\\tCatarrhini\\t|\\t\\t|\\tscientific name\",   \"314293\\t|\\tSimiiformes\\t|\\t\\t|\\tscientific name\",   \"376913\\t|\\tHaplorrhini\\t|\\t\\t|\\tscientific name\",   \"9443\\t|\\tPrimates\\t|\\t\\t|\\tscientific name\",   \"314146\\t|\\tEuarchontoglires\\t|\\t\\t|\\tscientific name\",   \"1437010\\t|\\tBoreoeutheria\\t|\\t\\t|\\tscientific name\",   \"9347\\t|\\tEutheria\\t|\\t\\t|\\tscientific name\",   \"32525\\t|\\tTheria\\t|\\t\\t|\\tscientific name\",   \"40674\\t|\\tMammalia\\t|\\t\\t|\\tscientific name\",   \"32524\\t|\\tAmniota\\t|\\t\\t|\\tscientific name\",   \"32523\\t|\\tTetrapoda\\t|\\t\\t|\\tscientific name\",   \"1338369\\t|\\tDipnotetrapodomorpha\\t|\\t\\t|\\tscientific name\",   \"8287\\t|\\tSarcopterygii\\t|\\t\\t|\\tscientific name\",   \"117571\\t|\\tEuteleostomi\\t|\\t\\t|\\tscientific name\",   \"117570\\t|\\tTeleostomi\\t|\\t\\t|\\tscientific name\",   \"7776\\t|\\tGnathostomata\\t|\\t\\t|\\tscientific name\",   \"7742\\t|\\tVertebrata\\t|\\t\\t|\\tscientific name\",   \"89593\\t|\\tCraniata\\t|\\t\\t|\\tscientific name\",   \"7711\\t|\\tChordata\\t|\\t\\t|\\tscientific name\",   \"33511\\t|\\tDeuterostomia\\t|\\t\\t|\\tscientific name\",   \"33213\\t|\\tBilateria\\t|\\t\\t|\\tscientific name\",   \"6072\\t|\\tEumetazoa\\t|\\t\\t|\\tscientific name\",   \"33208\\t|\\tMetazoa\\t|\\t\\t|\\tscientific name\",   \"33154\\t|\\tOpisthokonta\\t|\\t\\t|\\tscientific name\",   \"2759\\t|\\tEukaryota\\t|\\t\\t|\\tscientific name\",   \"131567\\t|\\tcellular organisms\\t|\\t\\t|\\tscientific name\" ) tmpFile<-tempfile() writeLines(namesText,tmpFile) taxaNames<-read.names.sql(tmpFile,sqlFile) nodesText<-c(  \"1\\t|\\t1\\t|\\tno rank\\t|\\t\\t|\\t8\\t|\\t0\\t|\\t1\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t\\t|\",   \"2\\t|\\t131567\\t|\\tdomain\\t|\\t\\t|\\t0\\t|\\t0\\t|\\t11\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t\\t|\",   \"6\\t|\\t335928\\t|\\tgenus\\t|\\t\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t0\\t|\\t0\\t|\\t\\t|\",   \"7\\t|\\t6\\t|\\tspecies\\t|\\tAC\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t1\\t|\\t0\\t|\\t\\t|\",   \"9\\t|\\t32199\\t|\\tspecies\\t|\\tBA\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t1\\t|\\t0\\t|\\t\\t|\",   \"9606\\t|\\t9605\\t|\\tspecies\", \"9605\\t|\\t207598\\t|\\tgenus\", \"207598\\t|\\t9604\\t|\\tsubfamily\",   \"9604\\t|\\t314295\\t|\\tfamily\", \"314295\\t|\\t9526\\t|\\tsuperfamily\",   \"9526\\t|\\t314293\\t|\\tparvorder\", \"314293\\t|\\t376913\\t|\\tinfraorder\",   \"376913\\t|\\t9443\\t|\\tsuborder\", \"9443\\t|\\t314146\\t|\\torder\",   \"314146\\t|\\t1437010\\t|\\tsuperorder\", \"1437010\\t|\\t9347\\t|\\tno rank\",   \"9347\\t|\\t32525\\t|\\tno rank\", \"32525\\t|\\t40674\\t|\\tno rank\",   \"40674\\t|\\t32524\\t|\\tclass\", \"32524\\t|\\t32523\\t|\\tno rank\", \"32523\\t|\\t1338369\\t|\\tno rank\",   \"1338369\\t|\\t8287\\t|\\tno rank\", \"8287\\t|\\t117571\\t|\\tno rank\",   \"117571\\t|\\t117570\\t|\\tno rank\", \"117570\\t|\\t7776\\t|\\tno rank\",   \"7776\\t|\\t7742\\t|\\tno rank\", \"7742\\t|\\t89593\\t|\\tno rank\", \"89593\\t|\\t7711\\t|\\tsubphylum\",   \"7711\\t|\\t33511\\t|\\tphylum\", \"33511\\t|\\t33213\\t|\\tno rank\", \"33213\\t|\\t6072\\t|\\tno rank\",   \"6072\\t|\\t33208\\t|\\tno rank\", \"33208\\t|\\t33154\\t|\\tkingdom\",   \"33154\\t|\\t2759\\t|\\tno rank\", \"2759\\t|\\t131567\\t|\\tdomain\",   \"131567\\t|\\t1\\t|\\tno rank\" ) writeLines(nodesText,tmpFile) taxaNodes<-read.nodes.sql(tmpFile,sqlFile) getRawTaxonomy(c(9606,9605),sqlFile) #> $`9606` #>                species                  genus              subfamily  #>         \"Homo sapiens\"                 \"Homo\"            \"Homininae\"  #>                 family            superfamily              parvorder  #>            \"Hominidae\"           \"Hominoidea\"           \"Catarrhini\"  #>             infraorder               suborder                  order  #>          \"Simiiformes\"          \"Haplorrhini\"             \"Primates\"  #>             superorder                no rank              no rank.1  #>     \"Euarchontoglires\"        \"Boreoeutheria\"             \"Eutheria\"  #>              no rank.2                  class              no rank.3  #>               \"Theria\"             \"Mammalia\"              \"Amniota\"  #>              no rank.4              no rank.5              no rank.6  #>            \"Tetrapoda\" \"Dipnotetrapodomorpha\"        \"Sarcopterygii\"  #>              no rank.7              no rank.8              no rank.9  #>         \"Euteleostomi\"           \"Teleostomi\"        \"Gnathostomata\"  #>             no rank.10              subphylum                 phylum  #>           \"Vertebrata\"             \"Craniata\"             \"Chordata\"  #>             no rank.11             no rank.12             no rank.13  #>        \"Deuterostomia\"            \"Bilateria\"            \"Eumetazoa\"  #>                kingdom             no rank.14                 domain  #>              \"Metazoa\"         \"Opisthokonta\"            \"Eukaryota\"  #>             no rank.15  #>   \"cellular organisms\"  #>  #> $`9605` #>                  genus              subfamily                 family  #>                 \"Homo\"            \"Homininae\"            \"Hominidae\"  #>            superfamily              parvorder             infraorder  #>           \"Hominoidea\"           \"Catarrhini\"          \"Simiiformes\"  #>               suborder                  order             superorder  #>          \"Haplorrhini\"             \"Primates\"     \"Euarchontoglires\"  #>                no rank              no rank.1              no rank.2  #>        \"Boreoeutheria\"             \"Eutheria\"               \"Theria\"  #>                  class              no rank.3              no rank.4  #>             \"Mammalia\"              \"Amniota\"            \"Tetrapoda\"  #>              no rank.5              no rank.6              no rank.7  #> \"Dipnotetrapodomorpha\"        \"Sarcopterygii\"         \"Euteleostomi\"  #>              no rank.8              no rank.9             no rank.10  #>           \"Teleostomi\"        \"Gnathostomata\"           \"Vertebrata\"  #>              subphylum                 phylum             no rank.11  #>             \"Craniata\"             \"Chordata\"        \"Deuterostomia\"  #>             no rank.12             no rank.13                kingdom  #>            \"Bilateria\"            \"Eumetazoa\"              \"Metazoa\"  #>             no rank.14                 domain             no rank.15  #>         \"Opisthokonta\"            \"Eukaryota\"   \"cellular organisms\"  #>"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getTaxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Get taxonomic ranks for a taxa — getTaxonomy","title":"Get taxonomic ranks for a taxa — getTaxonomy","text":"Take NCBI taxa IDs get corresponding taxa ranks name node SQLite database","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getTaxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get taxonomic ranks for a taxa — getTaxonomy","text":"","code":"getTaxonomy(   ids,   sqlFile = \"nameNode.sqlite\",   ...,   desiredTaxa = c(\"domain\", \"phylum\", \"class\", \"order\", \"family\", \"genus\", \"species\"),   getNames = TRUE )"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getTaxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get taxonomic ranks for a taxa — getTaxonomy","text":"ids vector ids find taxonomy sqlFile string giving path SQLite file containing names nodes tables ... legacy additional arguments original data.table based getTaxonomy function. Used support deprecated function, use new code. desiredTaxa vector strings giving desired taxa levels getNames logical indicating whether convert taxon IDs names TRUE simply return taxon ID FALSE","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getTaxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get taxonomic ranks for a taxa — getTaxonomy","text":"matrix taxonomic strings row id column desiredTaxa rank","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getTaxonomy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get taxonomic ranks for a taxa — getTaxonomy","text":"","code":"sqlFile<-tempfile() namesText<-c(   \"1\\t|\\tall\\t|\\t\\t|\\tsynonym\\t|\",   \"1\\t|\\troot\\t|\\t\\t|\\tscientific name\\t|\",   \"2\\t|\\tBacteria\\t|\\tBacteria <prokaryotes>\\t|\\tscientific name\\t|\",   \"2\\t|\\tMonera\\t|\\tMonera <Bacteria>\\t|\\tin-part\\t|\",   \"2\\t|\\tProcaryotae\\t|\\tProcaryotae <Bacteria>\\t|\\tin-part\\t|\",   \"9606\\t|\\tHomo sapiens\\t|\\t\\t|\\tscientific name\",   \"9605\\t|\\tHomo\\t|\\t\\t|\\tscientific name\",   \"207598\\t|\\tHomininae\\t|\\t\\t|\\tscientific name\",   \"9604\\t|\\tHominidae\\t|\\t\\t|\\tscientific name\",   \"314295\\t|\\tHominoidea\\t|\\t\\t|\\tscientific name\",   \"9526\\t|\\tCatarrhini\\t|\\t\\t|\\tscientific name\",   \"314293\\t|\\tSimiiformes\\t|\\t\\t|\\tscientific name\",   \"376913\\t|\\tHaplorrhini\\t|\\t\\t|\\tscientific name\",   \"9443\\t|\\tPrimates\\t|\\t\\t|\\tscientific name\",   \"314146\\t|\\tEuarchontoglires\\t|\\t\\t|\\tscientific name\",   \"1437010\\t|\\tBoreoeutheria\\t|\\t\\t|\\tscientific name\",   \"9347\\t|\\tEutheria\\t|\\t\\t|\\tscientific name\",   \"32525\\t|\\tTheria\\t|\\t\\t|\\tscientific name\",   \"40674\\t|\\tMammalia\\t|\\t\\t|\\tscientific name\",   \"32524\\t|\\tAmniota\\t|\\t\\t|\\tscientific name\",   \"32523\\t|\\tTetrapoda\\t|\\t\\t|\\tscientific name\",   \"1338369\\t|\\tDipnotetrapodomorpha\\t|\\t\\t|\\tscientific name\",   \"8287\\t|\\tSarcopterygii\\t|\\t\\t|\\tscientific name\",   \"117571\\t|\\tEuteleostomi\\t|\\t\\t|\\tscientific name\",   \"117570\\t|\\tTeleostomi\\t|\\t\\t|\\tscientific name\",   \"7776\\t|\\tGnathostomata\\t|\\t\\t|\\tscientific name\",   \"7742\\t|\\tVertebrata\\t|\\t\\t|\\tscientific name\",   \"89593\\t|\\tCraniata\\t|\\t\\t|\\tscientific name\",   \"7711\\t|\\tChordata\\t|\\t\\t|\\tscientific name\",   \"33511\\t|\\tDeuterostomia\\t|\\t\\t|\\tscientific name\",   \"33213\\t|\\tBilateria\\t|\\t\\t|\\tscientific name\",   \"6072\\t|\\tEumetazoa\\t|\\t\\t|\\tscientific name\",   \"33208\\t|\\tMetazoa\\t|\\t\\t|\\tscientific name\",   \"33154\\t|\\tOpisthokonta\\t|\\t\\t|\\tscientific name\",   \"2759\\t|\\tEukaryota\\t|\\t\\t|\\tscientific name\",   \"131567\\t|\\tcellular organisms\\t|\\t\\t|\\tscientific name\" ) tmpFile<-tempfile() writeLines(namesText,tmpFile) taxaNames<-read.names.sql(tmpFile,sqlFile) nodesText<-c(  \"1\\t|\\t1\\t|\\tno rank\\t|\\t\\t|\\t8\\t|\\t0\\t|\\t1\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t\\t|\",   \"2\\t|\\t131567\\t|\\tdomain\\t|\\t\\t|\\t0\\t|\\t0\\t|\\t11\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t\\t|\",   \"6\\t|\\t335928\\t|\\tgenus\\t|\\t\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t0\\t|\\t0\\t|\\t\\t|\",   \"7\\t|\\t6\\t|\\tspecies\\t|\\tAC\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t1\\t|\\t0\\t|\\t\\t|\",   \"9\\t|\\t32199\\t|\\tspecies\\t|\\tBA\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t1\\t|\\t0\\t|\\t\\t|\",   \"9606\\t|\\t9605\\t|\\tspecies\", \"9605\\t|\\t207598\\t|\\tgenus\", \"207598\\t|\\t9604\\t|\\tsubfamily\",   \"9604\\t|\\t314295\\t|\\tfamily\", \"314295\\t|\\t9526\\t|\\tsuperfamily\",   \"9526\\t|\\t314293\\t|\\tparvorder\", \"314293\\t|\\t376913\\t|\\tinfraorder\",   \"376913\\t|\\t9443\\t|\\tsuborder\", \"9443\\t|\\t314146\\t|\\torder\",   \"314146\\t|\\t1437010\\t|\\tsuperorder\", \"1437010\\t|\\t9347\\t|\\tno rank\",   \"9347\\t|\\t32525\\t|\\tno rank\", \"32525\\t|\\t40674\\t|\\tno rank\",   \"40674\\t|\\t32524\\t|\\tclass\", \"32524\\t|\\t32523\\t|\\tno rank\", \"32523\\t|\\t1338369\\t|\\tno rank\",   \"1338369\\t|\\t8287\\t|\\tno rank\", \"8287\\t|\\t117571\\t|\\tno rank\",   \"117571\\t|\\t117570\\t|\\tno rank\", \"117570\\t|\\t7776\\t|\\tno rank\",   \"7776\\t|\\t7742\\t|\\tno rank\", \"7742\\t|\\t89593\\t|\\tno rank\", \"89593\\t|\\t7711\\t|\\tsubphylum\",   \"7711\\t|\\t33511\\t|\\tphylum\", \"33511\\t|\\t33213\\t|\\tno rank\", \"33213\\t|\\t6072\\t|\\tno rank\",   \"6072\\t|\\t33208\\t|\\tno rank\", \"33208\\t|\\t33154\\t|\\tkingdom\",   \"33154\\t|\\t2759\\t|\\tno rank\", \"2759\\t|\\t131567\\t|\\tdomain\",   \"131567\\t|\\t1\\t|\\tno rank\" ) writeLines(nodesText,tmpFile) taxaNodes<-read.nodes.sql(tmpFile,sqlFile) getTaxonomy(c(9606,9605),sqlFile) #>      domain      phylum     class      order      family      genus  #> 9606 \"Eukaryota\" \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Homo\" #> 9605 \"Eukaryota\" \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Homo\" #>      species        #> 9606 \"Homo sapiens\" #> 9605 NA"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getTaxonomy2.html","id":null,"dir":"Reference","previous_headings":"","what":"Get taxonomic ranks for a taxa — getTaxonomy2","title":"Get taxonomic ranks for a taxa — getTaxonomy2","text":"Take NCBI taxa IDs get corresponding taxa ranks name node data.tables. NOTE: function now deprecated getTaxonomy (using SQLite rather data.table).","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getTaxonomy2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get taxonomic ranks for a taxa — getTaxonomy2","text":"","code":"getTaxonomy2(   ids,   taxaNodes,   taxaNames,   desiredTaxa = c(\"domain\", \"phylum\", \"class\", \"order\", \"family\", \"genus\", \"species\"),   mc.cores = 1,   debug = FALSE )"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getTaxonomy2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get taxonomic ranks for a taxa — getTaxonomy2","text":"ids vector ids find taxonomy taxaNodes nodes data.table read.nodes taxaNames names data.table read.names desiredTaxa vector strings giving desired taxa levels mc.cores DEPRECATED number cores use processing. Note option now deprecated effect. Please switch getTaxonomy (see taxonomizrSwitch) much faster processing without requiring multiple cores. debug TRUE output node name vectors dput id (probably useful development)","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getTaxonomy2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get taxonomic ranks for a taxa — getTaxonomy2","text":"matrix taxonomic strings row id column desiredTaxa rank","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/getTaxonomy2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get taxonomic ranks for a taxa — getTaxonomy2","text":"","code":"namesText<-c(   \"1\\t|\\tall\\t|\\t\\t|\\tsynonym\\t|\",   \"1\\t|\\troot\\t|\\t\\t|\\tscientific name\\t|\",   \"2\\t|\\tBacteria\\t|\\tBacteria <prokaryotes>\\t|\\tscientific name\\t|\",   \"2\\t|\\tMonera\\t|\\tMonera <Bacteria>\\t|\\tin-part\\t|\",   \"2\\t|\\tProcaryotae\\t|\\tProcaryotae <Bacteria>\\t|\\tin-part\\t|\",   \"9606\\t|\\tHomo sapiens\\t|\\t\\t|\\tscientific name\",   \"9605\\t|\\tHomo\\t|\\t\\t|\\tscientific name\",   \"207598\\t|\\tHomininae\\t|\\t\\t|\\tscientific name\",   \"9604\\t|\\tHominidae\\t|\\t\\t|\\tscientific name\",   \"314295\\t|\\tHominoidea\\t|\\t\\t|\\tscientific name\",   \"9526\\t|\\tCatarrhini\\t|\\t\\t|\\tscientific name\",   \"314293\\t|\\tSimiiformes\\t|\\t\\t|\\tscientific name\",   \"376913\\t|\\tHaplorrhini\\t|\\t\\t|\\tscientific name\",   \"9443\\t|\\tPrimates\\t|\\t\\t|\\tscientific name\",   \"314146\\t|\\tEuarchontoglires\\t|\\t\\t|\\tscientific name\",   \"1437010\\t|\\tBoreoeutheria\\t|\\t\\t|\\tscientific name\",   \"9347\\t|\\tEutheria\\t|\\t\\t|\\tscientific name\",   \"32525\\t|\\tTheria\\t|\\t\\t|\\tscientific name\",   \"40674\\t|\\tMammalia\\t|\\t\\t|\\tscientific name\",   \"32524\\t|\\tAmniota\\t|\\t\\t|\\tscientific name\",   \"32523\\t|\\tTetrapoda\\t|\\t\\t|\\tscientific name\",   \"1338369\\t|\\tDipnotetrapodomorpha\\t|\\t\\t|\\tscientific name\",   \"8287\\t|\\tSarcopterygii\\t|\\t\\t|\\tscientific name\",   \"117571\\t|\\tEuteleostomi\\t|\\t\\t|\\tscientific name\",   \"117570\\t|\\tTeleostomi\\t|\\t\\t|\\tscientific name\",   \"7776\\t|\\tGnathostomata\\t|\\t\\t|\\tscientific name\",   \"7742\\t|\\tVertebrata\\t|\\t\\t|\\tscientific name\",   \"89593\\t|\\tCraniata\\t|\\t\\t|\\tscientific name\",   \"7711\\t|\\tChordata\\t|\\t\\t|\\tscientific name\",   \"33511\\t|\\tDeuterostomia\\t|\\t\\t|\\tscientific name\",   \"33213\\t|\\tBilateria\\t|\\t\\t|\\tscientific name\",   \"6072\\t|\\tEumetazoa\\t|\\t\\t|\\tscientific name\",   \"33208\\t|\\tMetazoa\\t|\\t\\t|\\tscientific name\",   \"33154\\t|\\tOpisthokonta\\t|\\t\\t|\\tscientific name\",   \"2759\\t|\\tEukaryota\\t|\\t\\t|\\tscientific name\",   \"131567\\t|\\tcellular organisms\\t|\\t\\t|\\tscientific name\" ) tmpFile<-tempfile() writeLines(namesText,tmpFile) taxaNames<-read.names(tmpFile) #> Warning: taxonomizr is moving from data.table to SQLite databases to improve performance. This will require changing nodes and names processing. Please see ?read.names.sql or ?taxonomizrSwitch nodesText<-c(  \"1\\t|\\t1\\t|\\tno rank\\t|\\t\\t|\\t8\\t|\\t0\\t|\\t1\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t\\t|\",   \"2\\t|\\t131567\\t|\\tdomain\\t|\\t\\t|\\t0\\t|\\t0\\t|\\t11\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t\\t|\",   \"6\\t|\\t335928\\t|\\tgenus\\t|\\t\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t0\\t|\\t0\\t|\\t\\t|\",   \"7\\t|\\t6\\t|\\tspecies\\t|\\tAC\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t1\\t|\\t0\\t|\\t\\t|\",   \"9\\t|\\t32199\\t|\\tspecies\\t|\\tBA\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t1\\t|\\t0\\t|\\t\\t|\",   \"9606\\t|\\t9605\\t|\\tspecies\", \"9605\\t|\\t207598\\t|\\tgenus\", \"207598\\t|\\t9604\\t|\\tsubfamily\",   \"9604\\t|\\t314295\\t|\\tfamily\", \"314295\\t|\\t9526\\t|\\tsuperfamily\",   \"9526\\t|\\t314293\\t|\\tparvorder\", \"314293\\t|\\t376913\\t|\\tinfraorder\",   \"376913\\t|\\t9443\\t|\\tsuborder\", \"9443\\t|\\t314146\\t|\\torder\",   \"314146\\t|\\t1437010\\t|\\tsuperorder\", \"1437010\\t|\\t9347\\t|\\tno rank\",   \"9347\\t|\\t32525\\t|\\tno rank\", \"32525\\t|\\t40674\\t|\\tno rank\",   \"40674\\t|\\t32524\\t|\\tclass\", \"32524\\t|\\t32523\\t|\\tno rank\", \"32523\\t|\\t1338369\\t|\\tno rank\",   \"1338369\\t|\\t8287\\t|\\tno rank\", \"8287\\t|\\t117571\\t|\\tno rank\",   \"117571\\t|\\t117570\\t|\\tno rank\", \"117570\\t|\\t7776\\t|\\tno rank\",   \"7776\\t|\\t7742\\t|\\tno rank\", \"7742\\t|\\t89593\\t|\\tno rank\", \"89593\\t|\\t7711\\t|\\tsubphylum\",   \"7711\\t|\\t33511\\t|\\tphylum\", \"33511\\t|\\t33213\\t|\\tno rank\", \"33213\\t|\\t6072\\t|\\tno rank\",   \"6072\\t|\\t33208\\t|\\tno rank\", \"33208\\t|\\t33154\\t|\\tkingdom\",   \"33154\\t|\\t2759\\t|\\tno rank\", \"2759\\t|\\t131567\\t|\\tdomain\",   \"131567\\t|\\t1\\t|\\tno rank\" ) writeLines(nodesText,tmpFile) taxaNodes<-read.nodes(tmpFile) #> Warning: taxonomizr is moving from data.table to SQLite databases to improve performance. This will require changing nodes and names processing. Please see ?read.nodes.sql or ?taxonomizrSwitch getTaxonomy2(c(9606,9605),taxaNodes,taxaNames,mc.cores=1) #> Warning: taxonomizr is moving from data.table to SQLite databases to improve performance. This will require changing nodes and names processing. Please see ?getTaxonomy or ?taxonomizrSwitch #>      domain      phylum     class      order      family      genus  #> 9606 \"Eukaryota\" \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Homo\" #> 9605 \"Eukaryota\" \"Chordata\" \"Mammalia\" \"Primates\" \"Hominidae\" \"Homo\" #>      species        #> 9606 \"Homo sapiens\" #> 9605 NA"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/lastNotNa.html","id":null,"dir":"Reference","previous_headings":"","what":"Return last not NA value — lastNotNa","title":"Return last not NA value — lastNotNa","text":"convenience function return last value NA vector","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/lastNotNa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return last not NA value — lastNotNa","text":"","code":"lastNotNa(x, default = \"Unknown\")"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/lastNotNa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return last not NA value — lastNotNa","text":"x vector look last value default default value use values NA vector","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/lastNotNa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return last not NA value — lastNotNa","text":"single element last non NA value x (default)","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/lastNotNa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return last not NA value — lastNotNa","text":"","code":"lastNotNa(c(1:4,NA,NA)) #> [1] 4 lastNotNa(c(letters[1:4],NA,'z',NA)) #> [1] \"z\" lastNotNa(c(NA,NA)) #> [1] \"Unknown\""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/makeNewick.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Newick tree from taxonomy — makeNewick","title":"Create a Newick tree from taxonomy — makeNewick","text":"Create Newick formatted tree data.frame taxonomic assignments","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/makeNewick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Newick tree from taxonomy — makeNewick","text":"","code":"makeNewick(   taxa,   naSub = \"_\",   excludeTerminalNAs = FALSE,   quote = NULL,   terminator = \";\" )"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/makeNewick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Newick tree from taxonomy — makeNewick","text":"taxa matrix row leaf tree column taxonomic classification e.g. output getTaxonomy naSub character string substitute place NAs taxonomy excludeTerminalNAs TRUE output nodes downstream last named taxonomic level row quote NULL wrap entries character terminator NULL add character end tree","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/makeNewick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Newick tree from taxonomy — makeNewick","text":"string giving Newick formatted tree","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/makeNewick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Newick tree from taxonomy — makeNewick","text":"","code":"taxa<-matrix(c('A','A','A','B','B','C','D','D','E','F','G','H'),nrow=3) makeNewick(taxa) #> [1] \"((((F,G)D)B,((H)E)C)A);\" taxa<-matrix(c('A','A','A','B',NA,'C','D','D',NA,'F','G',NA),nrow=3) makeNewick(taxa) #> [1] \"((((F)D)B,((G)D)_,((_)_)C)A);\" makeNewick(taxa,excludeTerminalNAs=TRUE) #> [1] \"((((F)D)B,((G)D)_,C)A);\" makeNewick(taxa,quote=\"'\") #> [1] \"(((('F')'D')'B',(('G')'D')_,((_)_)'C')'A');\""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/normalizeTaxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Bring multiple raw taxonomies into alignment — normalizeTaxa","title":"Bring multiple raw taxonomies into alignment — normalizeTaxa","text":"Combine raw taxonomy several taxa single matrix row corresponds taxa column taxonomic level. Named taxonomic levels aligned taxa unspecified clades combined named levels. Taxonomic levels named levels arbitrarily combined generic specific. Working data provided NCBI taxonomy results ambiguities results used care.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/normalizeTaxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bring multiple raw taxonomies into alignment — normalizeTaxa","text":"","code":"normalizeTaxa(   rawTaxa,   cladeRegex = \"^clade$|^clade\\\\.[0-9]+$|^$|no rank\",   rootFill = \"_ROOT_\",   lineageOrder = c() )"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/normalizeTaxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bring multiple raw taxonomies into alignment — normalizeTaxa","text":"rawTaxa list vectors vector containing named character vector entries specifying taxonomy clade names giving corresponding taxonomic levels e.g. output getRawTaxonomy cladeRegex regex identify ambiguous taxonomic levels. case NCBI taxonomy, unidentified levels labelled \"clade\" getRawTaxonomy may attach unique digit attach end uniqueness. rootFill clade upstream highest taxonomic level labeled prefix lineageOrder vector giving ordering lineages specific generic. unnecessary unless taxonomy contains ambiguities e.g. one taxa goes species kingdom another goes genus kingdom leaving ambiguous whether genus species specific","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/normalizeTaxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bring multiple raw taxonomies into alignment — normalizeTaxa","text":"matrix row taxa column taxonomic level","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/normalizeTaxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bring multiple raw taxonomies into alignment — normalizeTaxa","text":"","code":"rawTaxa<-list(    '81907' = c(species = \"Alectura lathami\", genus = \"Alectura\",      family = \"Megapodiidae\", order = \"Galliformes\", superorder = \"Galloanserae\",      infraclass = \"Neognathae\", class = \"Aves\", clade = \"Coelurosauria\",      clade.1 = \"Theropoda\", clade.2 = \"Saurischia\", clade.3 = \"Dinosauria\",      clade.4 = \"Archosauria\", clade.5 = \"Archelosauria\", clade.6 = \"Sauria\",      clade.7 = \"Sauropsida\", clade.8 = \"Amniota\", clade.9 = \"Tetrapoda\",      clade.10 = \"Dipnotetrapodomorpha\", superclass = \"Sarcopterygii\",      clade.11 = \"Euteleostomi\", clade.12 = \"Teleostomi\", clade.13 = \"Gnathostomata\",      clade.14 = \"Vertebrata\", subphylum = \"Craniata\", phylum = \"Chordata\",      clade.15 = \"Deuterostomia\", clade.16 = \"Bilateria\", clade.17 = \"Eumetazoa\",      kingdom = \"Metazoa\", clade.18 = \"Opisthokonta\", domain = \"Eukaryota\",      'no rank' = \"cellular organisms\"),    '8496' = c(species = \"Alligator mississippiensis\",      genus = \"Alligator\", subfamily = \"Alligatorinae\", family = \"Alligatoridae\",      order = \"Crocodylia\", clade = \"Archosauria\", clade.1 = \"Archelosauria\",      clade.2 = \"Sauria\", clade.3 = \"Sauropsida\", clade.4 = \"Amniota\",      clade.5 = \"Tetrapoda\", clade.6 = \"Dipnotetrapodomorpha\", superclass = \"Sarcopterygii\",      clade.7 = \"Euteleostomi\", clade.8 = \"Teleostomi\", clade.9 = \"Gnathostomata\",      clade.10 = \"Vertebrata\", subphylum = \"Craniata\", phylum = \"Chordata\",      clade.11 = \"Deuterostomia\", clade.12 = \"Bilateria\", clade.13 = \"Eumetazoa\",      kingdom = \"Metazoa\", clade.14 = \"Opisthokonta\", domain = \"Eukaryota\",      'no rank' = \"cellular organisms\"),    '38654' = c(species = \"Alligator sinensis\",      genus = \"Alligator\", subfamily = \"Alligatorinae\", family = \"Alligatoridae\",      order = \"Crocodylia\", clade = \"Archosauria\", clade.1 = \"Archelosauria\",      clade.2 = \"Sauria\", clade.3 = \"Sauropsida\", clade.4 = \"Amniota\",      clade.5 = \"Tetrapoda\", clade.6 = \"Dipnotetrapodomorpha\", superclass = \"Sarcopterygii\",      clade.7 = \"Euteleostomi\", clade.8 = \"Teleostomi\", clade.9 = \"Gnathostomata\",      clade.10 = \"Vertebrata\", subphylum = \"Craniata\", phylum = \"Chordata\",      clade.11 = \"Deuterostomia\", clade.12 = \"Bilateria\", clade.13 = \"Eumetazoa\",      kingdom = \"Metazoa\", clade.14 = \"Opisthokonta\", domain = \"Eukaryota\",      'no rank' = \"cellular organisms\") ) normalizeTaxa(rawTaxa) #>       _ROOT_.1             domain      domain.1       kingdom   kingdom.1   #> 81907 \"cellular organisms\" \"Eukaryota\" \"Opisthokonta\" \"Metazoa\" \"Eumetazoa\" #> 8496  \"cellular organisms\" \"Eukaryota\" \"Opisthokonta\" \"Metazoa\" \"Eumetazoa\" #> 38654 \"cellular organisms\" \"Eukaryota\" \"Opisthokonta\" \"Metazoa\" \"Eumetazoa\" #>       kingdom.2   kingdom.3       phylum     subphylum  subphylum.1  #> 81907 \"Bilateria\" \"Deuterostomia\" \"Chordata\" \"Craniata\" \"Vertebrata\" #> 8496  \"Bilateria\" \"Deuterostomia\" \"Chordata\" \"Craniata\" \"Vertebrata\" #> 38654 \"Bilateria\" \"Deuterostomia\" \"Chordata\" \"Craniata\" \"Vertebrata\" #>       subphylum.2     subphylum.3  subphylum.4    superclass      #> 81907 \"Gnathostomata\" \"Teleostomi\" \"Euteleostomi\" \"Sarcopterygii\" #> 8496  \"Gnathostomata\" \"Teleostomi\" \"Euteleostomi\" \"Sarcopterygii\" #> 38654 \"Gnathostomata\" \"Teleostomi\" \"Euteleostomi\" \"Sarcopterygii\" #>       superclass.1           superclass.2 superclass.3 superclass.4 #> 81907 \"Dipnotetrapodomorpha\" \"Tetrapoda\"  \"Amniota\"    \"Sauropsida\" #> 8496  \"Dipnotetrapodomorpha\" \"Tetrapoda\"  \"Amniota\"    \"Sauropsida\" #> 38654 \"Dipnotetrapodomorpha\" \"Tetrapoda\"  \"Amniota\"    \"Sauropsida\" #>       superclass.5 superclass.6    superclass.7  superclass.8 superclass.9 #> 81907 \"Sauria\"     \"Archelosauria\" \"Archosauria\" \"Dinosauria\" \"Saurischia\" #> 8496  \"Sauria\"     \"Archelosauria\" \"Archosauria\" NA           NA           #> 38654 \"Sauria\"     \"Archelosauria\" \"Archosauria\" NA           NA           #>       superclass.10 superclass.11   class  infraclass   superorder     #> 81907 \"Theropoda\"   \"Coelurosauria\" \"Aves\" \"Neognathae\" \"Galloanserae\" #> 8496  NA            NA              NA     NA           NA             #> 38654 NA            NA              NA     NA           NA             #>       order         family          subfamily       genus       #> 81907 \"Galliformes\" \"Megapodiidae\"  NA              \"Alectura\"  #> 8496  \"Crocodylia\"  \"Alligatoridae\" \"Alligatorinae\" \"Alligator\" #> 38654 \"Crocodylia\"  \"Alligatoridae\" \"Alligatorinae\" \"Alligator\" #>       species                      #> 81907 \"Alectura lathami\"           #> 8496  \"Alligator mississippiensis\" #> 38654 \"Alligator sinensis\""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/prepareDatabase.html","id":null,"dir":"Reference","previous_headings":"","what":"Download data from NCBI and set up SQLite database — prepareDatabase","title":"Download data from NCBI and set up SQLite database — prepareDatabase","text":"Convenience function necessary preparations downloading names, nodes accession2taxid data NCBI preprocessing SQLite database downstream use.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/prepareDatabase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download data from NCBI and set up SQLite database — prepareDatabase","text":"","code":"prepareDatabase(   sqlFile = \"nameNode.sqlite\",   tmpDir = \".\",   getAccessions = TRUE,   vocal = TRUE,   ... )"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/prepareDatabase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download data from NCBI and set up SQLite database — prepareDatabase","text":"sqlFile character string giving file location store SQLite database tmpDir location storing downloaded files NCBI. (Note may useful store somewhere convenient avoid redownloading) getAccessions TRUE download large accesssion2taxid files necessary convert accessions taxonomic IDs vocal TRUE output messages describing progress ... Arguments passed getNamesAndNodes, getAccession2taxid, read.accession2taxid url url taxdump.tar.gz located fileNames filenames desired tar.gz file protocol protocol used downloading. Probably either 'http' 'ftp'. Overridden url provided directly resume TRUE attempt resume downloading interrupted file without starting beginning baseUrl url directory accession2taxid.gz files located types types accession2taxid.gz files desired type prefix xxx.accession2taxid.gz. default download nucl_ accessions. protein accessions, try types=c('prot'). extraSqlCommand advanced use. string giving command called SQLite database loading data. couple potential uses: \"pragma temp_store = 2;\" keep SQLite temp files memory. unless lot (>100 Gb) RAM indexTaxa TRUE add index taxa ID. necessary want look accessions taxa ID e.g. getAccessions overwrite TRUE, delete accessionTaxa table database present regenerate","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/prepareDatabase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download data from NCBI and set up SQLite database — prepareDatabase","text":"vector character string giving path SQLite file","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/prepareDatabase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download data from NCBI and set up SQLite database — prepareDatabase","text":"","code":"if (FALSE) { # \\dontrun{   if(readline(     \"This will download a lot data and take a while to process.      Make sure you have space and bandwidth. Type y to continue: \"   )!='y')     stop('This is a stop to make sure no one downloads a bunch of data unintentionally')    prepareDatabase() } # }"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.accession2taxid.html","id":null,"dir":"Reference","previous_headings":"","what":"Read NCBI accession2taxid files — read.accession2taxid","title":"Read NCBI accession2taxid files — read.accession2taxid","text":"Take NCBI accession2taxid files, keep accession taxa save SQLite database","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.accession2taxid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read NCBI accession2taxid files — read.accession2taxid","text":"","code":"read.accession2taxid(   taxaFiles,   sqlFile,   vocal = TRUE,   extraSqlCommand = \"\",   indexTaxa = FALSE,   overwrite = FALSE )"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.accession2taxid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read NCBI accession2taxid files — read.accession2taxid","text":"taxaFiles string vector strings giving path(s) files read sqlFile string giving path output SQLite file saved vocal TRUE output status messages extraSqlCommand advanced use. string giving command called SQLite database loading data. couple potential uses: \"pragma temp_store = 2;\" keep SQLite temp files memory. unless lot (>100 Gb) RAM indexTaxa TRUE add index taxa ID. necessary want look accessions taxa ID e.g. getAccessions overwrite TRUE, delete accessionTaxa table database present regenerate","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.accession2taxid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read NCBI accession2taxid files — read.accession2taxid","text":"TRUE sucessful","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.accession2taxid.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read NCBI accession2taxid files — read.accession2taxid","text":"https://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.accession2taxid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read NCBI accession2taxid files — read.accession2taxid","text":"","code":"taxa<-c(   \"accession\\taccession.version\\ttaxid\\tgi\",   \"Z17427\\tZ17427.1\\t3702\\t16569\",   \"Z17428\\tZ17428.1\\t3702\\t16570\",   \"Z17429\\tZ17429.1\\t3702\\t16571\",   \"Z17430\\tZ17430.1\\t3702\\t16572\" ) inFile<-tempfile() sqlFile<-tempfile() writeLines(taxa,inFile) read.accession2taxid(inFile,sqlFile,vocal=FALSE) db<-RSQLite::dbConnect(RSQLite::SQLite(),dbname=sqlFile) RSQLite::dbGetQuery(db,'SELECT * FROM accessionTaxa') #>     base accession taxa #> 1 Z17427  Z17427.1 3702 #> 2 Z17428  Z17428.1 3702 #> 3 Z17429  Z17429.1 3702 #> 4 Z17430  Z17430.1 3702 RSQLite::dbDisconnect(db)"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.names.html","id":null,"dir":"Reference","previous_headings":"","what":"Read NCBI names file — read.names","title":"Read NCBI names file — read.names","text":"Take NCBI names file, keep scientific names convert data.table. NOTE: function now deprecated read.names.sql (using SQLite rather data.table).","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read NCBI names file — read.names","text":"","code":"read.names(nameFile, onlyScientific = TRUE)"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read NCBI names file — read.names","text":"nameFile string giving path NCBI name file read (gzipped uncompressed files ok) onlyScientific TRUE, store scientific names. FALSE, synonyms types included (increasing potential ambiguous taxonomic assignments).","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read NCBI names file — read.names","text":"data.table columns id name key id","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.names.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read NCBI names file — read.names","text":"https://ftp.ncbi.nih.gov/pub/taxonomy/","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read NCBI names file — read.names","text":"","code":"namesText<-c(   \"1\\t|\\tall\\t|\\t\\t|\\tsynonym\\t|\",   \"1\\t|\\troot\\t|\\t\\t|\\tscientific name\\t|\",   \"2\\t|\\tBacteria\\t|\\tBacteria <prokaryotes>\\t|\\tscientific name\\t|\",   \"2\\t|\\tMonera\\t|\\tMonera <Bacteria>\\t|\\tin-part\\t|\",   \"2\\t|\\tProcaryotae\\t|\\tProcaryotae <Bacteria>\\t|\\tin-part\\t|\" ) tmpFile<-tempfile() writeLines(namesText,tmpFile) read.names(tmpFile) #> Warning: taxonomizr is moving from data.table to SQLite databases to improve performance. This will require changing nodes and names processing. Please see ?read.names.sql or ?taxonomizrSwitch #> Key: <id> #> Index: <name> #>       id     name #>    <num>   <char> #> 1:     1     root #> 2:     2 Bacteria"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.names.sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Read NCBI names file — read.names.sql","title":"Read NCBI names file — read.names.sql","text":"Take NCBI names file, keep scientific names convert SQLite table","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.names.sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read NCBI names file — read.names.sql","text":"","code":"read.names.sql(nameFile, sqlFile = \"nameNode.sqlite\", overwrite = FALSE)"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.names.sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read NCBI names file — read.names.sql","text":"nameFile string giving path NCBI name file read (gzipped uncompressed files ok) sqlFile string giving path output SQLite file saved overwrite TRUE, delete names table database present regenerate","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.names.sql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read NCBI names file — read.names.sql","text":"invisibly returns string path sqlfile","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.names.sql.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read NCBI names file — read.names.sql","text":"https://ftp.ncbi.nih.gov/pub/taxonomy/","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.names.sql.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read NCBI names file — read.names.sql","text":"","code":"namesText<-c(   \"1\\t|\\tall\\t|\\t\\t|\\tsynonym\\t|\",   \"1\\t|\\troot\\t|\\t\\t|\\tscientific name\\t|\",   \"2\\t|\\tBacteria\\t|\\tBacteria <prokaryotes>\\t|\\tscientific name\\t|\",   \"2\\t|\\tMonera\\t|\\tMonera <Bacteria>\\t|\\tin-part\\t|\",   \"2\\t|\\tProcaryotae\\t|\\tProcaryotae <Bacteria>\\t|\\tin-part\\t|\" ) tmpFile<-tempfile() writeLines(namesText,tmpFile) sqlFile<-tempfile() read.names.sql(tmpFile,sqlFile)"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Read NCBI nodes file — read.nodes","title":"Read NCBI nodes file — read.nodes","text":"Take NCBI nodes file convert data.table. NOTE: function now deprecated read.nodes.sql (using SQLite rather data.table).","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read NCBI nodes file — read.nodes","text":"","code":"read.nodes(nodeFile)"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read NCBI nodes file — read.nodes","text":"nodeFile string giving path NCBI node file read (gzipped uncompressed files ok)","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read NCBI nodes file — read.nodes","text":"data.table columns id, parent rank key id","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.nodes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read NCBI nodes file — read.nodes","text":"https://ftp.ncbi.nih.gov/pub/taxonomy/","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.nodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read NCBI nodes file — read.nodes","text":"","code":"nodes<-c(  \"1\\t|\\t1\\t|\\tno rank\\t|\\t\\t|\\t8\\t|\\t0\\t|\\t1\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t\\t|\",  \"2\\t|\\t131567\\t|\\tdomain\\t|\\t\\t|\\t0\\t|\\t0\\t|\\t11\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t\\t|\",  \"6\\t|\\t335928\\t|\\tgenus\\t|\\t\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t0\\t|\\t0\\t|\\t\\t|\",  \"7\\t|\\t6\\t|\\tspecies\\t|\\tAC\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t1\\t|\\t0\\t|\\t\\t|\",  \"9\\t|\\t32199\\t|\\tspecies\\t|\\tBA\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t1\\t|\\t0\\t|\\t\\t|\" ) tmpFile<-tempfile() writeLines(nodes,tmpFile) read.nodes(tmpFile) #> Warning: taxonomizr is moving from data.table to SQLite databases to improve performance. This will require changing nodes and names processing. Please see ?read.nodes.sql or ?taxonomizrSwitch #> Key: <id> #>       id    rank parent #>    <num>  <char>  <num> #> 1:     1 no rank      1 #> 2:     2  domain 131567 #> 3:     6   genus 335928 #> 4:     7 species      6 #> 5:     9 species  32199"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.nodes.sql.html","id":null,"dir":"Reference","previous_headings":"","what":"Read NCBI nodes file — read.nodes.sql","title":"Read NCBI nodes file — read.nodes.sql","text":"Take NCBI nodes file convert data.table","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.nodes.sql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read NCBI nodes file — read.nodes.sql","text":"","code":"read.nodes.sql(nodeFile, sqlFile = \"nameNode.sqlite\", overwrite = FALSE)"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.nodes.sql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read NCBI nodes file — read.nodes.sql","text":"nodeFile string giving path NCBI node file read (gzipped uncompressed files ok) sqlFile string giving path output SQLite file saved overwrite TRUE, delete nodes table database present regenerate","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.nodes.sql.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read NCBI nodes file — read.nodes.sql","text":"data.table columns id, parent rank key id","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.nodes.sql.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read NCBI nodes file — read.nodes.sql","text":"https://ftp.ncbi.nih.gov/pub/taxonomy/","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/read.nodes.sql.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read NCBI nodes file — read.nodes.sql","text":"","code":"nodes<-c(  \"1\\t|\\t1\\t|\\tno rank\\t|\\t\\t|\\t8\\t|\\t0\\t|\\t1\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t\\t|\",  \"2\\t|\\t131567\\t|\\tdomain\\t|\\t\\t|\\t0\\t|\\t0\\t|\\t11\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t0\\t|\\t\\t|\",  \"6\\t|\\t335928\\t|\\tgenus\\t|\\t\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t0\\t|\\t0\\t|\\t\\t|\",  \"7\\t|\\t6\\t|\\tspecies\\t|\\tAC\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t1\\t|\\t0\\t|\\t\\t|\",  \"9\\t|\\t32199\\t|\\tspecies\\t|\\tBA\\t|\\t0\\t|\\t1\\t|\\t11\\t|\\t1\\t|\\t0\\t|\\t1\\t|\\t1\\t|\\t0\\t|\\t\\t|\" ) tmpFile<-tempfile() sqlFile<-tempfile() writeLines(nodes,tmpFile) read.nodes.sql(tmpFile,sqlFile)"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/resumableDownload.html","id":null,"dir":"Reference","previous_headings":"","what":"Download file using curl allowing resumption of interrupted files — resumableDownload","title":"Download file using curl allowing resumption of interrupted files — resumableDownload","text":"helper function uses curl package's multi_download download file using temporary file store progress resume downloading interruption.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/resumableDownload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download file using curl allowing resumption of interrupted files — resumableDownload","text":"","code":"resumableDownload(   url,   outFile = basename(url),   tmpFile = sprintf(\"%s.__TMP__\", outFile),   quiet = FALSE,   resume = TRUE,   ... )"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/resumableDownload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download file using curl allowing resumption of interrupted files — resumableDownload","text":"url address download outFile file location store final download tmpFile file location store intermediate download quiet TRUE show progress reported multi_download resume TRUE try resume interrupted downloads using intermediate file tmpFile. Otherwise delete tempFile error ... Additional arguments multi_download","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/resumableDownload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download file using curl allowing resumption of interrupted files — resumableDownload","text":"invisibly return output multi_download","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/resumableDownload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download file using curl allowing resumption of interrupted files — resumableDownload","text":"","code":"if (FALSE) { # \\dontrun{   url<-'https://ftp.ncbi.nih.gov/pub/taxonomy/accession2taxid/prot.accession2taxid.FULL.1.gz'   resumableDownload(url,'downloadedFile.gz') } # }"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/streamingRead.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a large file piecewise — streamingRead","title":"Process a large file piecewise — streamingRead","text":"convenience function read large file piece piece, process (hopefully reducing size either summarizing removing extra rows columns) return output","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/streamingRead.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a large file piecewise — streamingRead","text":"","code":"streamingRead(   bigFile,   n = 1e+06,   FUN = function(xx) sub(\",.*\", \"\", xx),   ...,   vocal = FALSE )"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/streamingRead.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a large file piecewise — streamingRead","text":"bigFile string giving path file read connection opened \"r\" mode n number lines read per chunk FUN function taking unparsed lines chunk bigfile single argument returning desired output ... additional arguments FUN vocal TRUE cat \".\" chunk processed","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/streamingRead.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a large file piecewise — streamingRead","text":"list containing results applying func multiple chunks file","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/streamingRead.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process a large file piecewise — streamingRead","text":"","code":"tmpFile<-tempfile() writeLines(LETTERS,tmpFile) streamingRead(tmpFile,10,head,1) #> [[1]] #> [1] \"A\" #>  #> [[2]] #> [1] \"K\" #>  #> [[3]] #> [1] \"U\" #>  writeLines(letters,tmpFile) streamingRead(tmpFile,2,paste,collapse='',vocal=TRUE) #> ............. #> [[1]] #> [1] \"ab\" #>  #> [[2]] #> [1] \"cd\" #>  #> [[3]] #> [1] \"ef\" #>  #> [[4]] #> [1] \"gh\" #>  #> [[5]] #> [1] \"ij\" #>  #> [[6]] #> [1] \"kl\" #>  #> [[7]] #> [1] \"mn\" #>  #> [[8]] #> [1] \"op\" #>  #> [[9]] #> [1] \"qr\" #>  #> [[10]] #> [1] \"st\" #>  #> [[11]] #> [1] \"uv\" #>  #> [[12]] #> [1] \"wx\" #>  #> [[13]] #> [1] \"yz\" #>  unlist(streamingRead(tmpFile,2,sample,1)) #>  [1] \"a\" \"d\" \"f\" \"g\" \"i\" \"l\" \"m\" \"p\" \"q\" \"s\" \"u\" \"x\" \"z\""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/taxonomizr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"taxonomizr: Functions to Work with NCBI Accessions and Taxonomy — taxonomizr-package","title":"taxonomizr: Functions to Work with NCBI Accessions and Taxonomy — taxonomizr-package","text":"Functions assigning taxonomy NCBI accession numbers taxon IDs based NCBI's accession2taxid taxdump files. package allows user download NCBI data dumps create local database fast local taxonomic assignment.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/taxonomizr-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"taxonomizr: Functions to Work with NCBI Accessions and Taxonomy — taxonomizr-package","text":"taxonomizr provides simple functions parse NCBI taxonomy files accession dumps efficiently use assign taxonomy accession numbers taxonomic IDs (https://www.ncbi.nlm.nih.gov/Taxonomy/taxonomyhome.html/). useful example assign taxonomy BLAST results. done locally downloading appropriate files NCBI using included functions. major functions : prepareDatabase: download data NCBI prepare SQLite database link{accessionToTaxa}: convert accession numbers taxonomic IDs getTaxonomy: convert taxonomic IDs taxonomy specialized functions : getId: convert biological name taxonomic ID getAccessions: find accessions given taxonomic ID","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/taxonomizr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"taxonomizr: Functions to Work with NCBI Accessions and Taxonomy — taxonomizr-package","text":"Maintainer: Scott Sherrill-Mix ssm@msu.edu","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/taxonomizr-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"taxonomizr: Functions to Work with NCBI Accessions and Taxonomy — taxonomizr-package","text":"","code":"if (FALSE) { # \\dontrun{   if(readline(     \"This will download a lot data and take a while to process.      Make sure you have space and bandwidth. Type y to continue: \"   )!='y')     stop('This is a stop to make sure no one downloads a bunch of data unintentionally')    prepareDatabase('accessionTaxa.sql')   blastAccessions<-c(\"Z17430.1\",\"Z17429.1\",\"X62402.1\")   ids<-accessionToTaxa(blastAccessions,'accessionTaxa.sql')   getTaxonomy(ids,'accessionTaxa.sql') } # }"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/taxonomizrSwitch.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch from data.table to SQLite — taxonomizrSwitch","title":"Switch from data.table to SQLite — taxonomizrSwitch","text":"version 0.5.0, taxonomizr switched data.table SQLite name node lookups. See details.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/taxonomizrSwitch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Switch from data.table to SQLite — taxonomizrSwitch","text":"Version 0.5.0 marked change name node lookups using data.table using SQLite. necessary increase performance (10-100x speedup getTaxonomy) create simpler interface (single SQLite database contains necessary data). Unfortunately, switch requires couple breaking changes: getTaxonomy changes getTaxonomy(ids,namesDT,nodesDT) getTaxonomy(ids,sqlFile) getId changes  getId(taxa,namesDT) getId(taxa,sqlFile) read.names deprecated, instead use read.names.sql. example, instead calling names<-read.names('names.dmp') every session, simply call read.names.sql('names.dmp','accessionTaxa.sql') (use convenient prepareDatabase)). read.nodes deprecated, instead use read.names.sql. example. instead calling nodes<-read.names('nodes.dmp') every session, simply call read.nodes.sql('nodes.dmp','accessionTaxa.sql') (use convenient prepareDatabase). tried ease problems overloading getTaxonomy getId still function (warning) passed data.table names nodes argument providing simpler prepareDatabase function completing setup steps (hopefully avoiding direct calls read.names read.nodes users). plan eventually remove data.table functionality avoid split codebase please switch new SQLite format new code.","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/topoSort.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple sorted vectors into a single sorted vector — topoSort","title":"Combine multiple sorted vectors into a single sorted vector — topoSort","text":"Combine multiple sorted vectors single vector assuming cycles weird topologies. global position ambiguous, result placed arbitrarily.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/topoSort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple sorted vectors into a single sorted vector — topoSort","text":"","code":"topoSort(vectors, maxIter = 1000, errorIfAmbiguous = FALSE)"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/topoSort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple sorted vectors into a single sorted vector — topoSort","text":"vectors list vectors vector containing sorted elements merged global sorted vector maxIter integer specifying maximum number iterations bailing . unnecessary just safety feature case unexpected input bug. errorIfAmbiguous TRUE error ambiguities arise","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/topoSort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple sorted vectors into a single sorted vector — topoSort","text":"vector unique elements sorted combined ordering provided input vectors","code":""},{"path":[]},{"path":"https://github.com/sherrillmix/taxonomizr/reference/topoSort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine multiple sorted vectors into a single sorted vector — topoSort","text":"","code":"topoSort(list(c('a','b','f','g'),c('b','e','g','y','z'),c('b','d','e','f','y'))) #> [1] \"a\" \"b\" \"d\" \"e\" \"f\" \"g\" \"y\" \"z\""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/trimTaxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim columns from taxa file — trimTaxa","title":"Trim columns from taxa file — trimTaxa","text":"simple script delete first row delete first fourth column four column tab delimited file write another file.","code":""},{"path":"https://github.com/sherrillmix/taxonomizr/reference/trimTaxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim columns from taxa file — trimTaxa","text":"","code":"trimTaxa(inFile, outFile, desiredCols = c(2, 3))"},{"path":"https://github.com/sherrillmix/taxonomizr/reference/trimTaxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim columns from taxa file — trimTaxa","text":"inFile single string giving 4 column tab separated file read outFile single string giving file path write desiredCols integer IDs columns pull file","code":""}]
